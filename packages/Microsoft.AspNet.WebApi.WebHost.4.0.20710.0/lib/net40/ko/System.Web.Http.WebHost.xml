<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http.WebHost</name>
  </assembly>
  <members>
    <member name="T:System.Web.Http.GlobalConfiguration">
      <summary> ASP.NET 응용 프로그램에 대해 전역 <see cref="T:System.Web.Http.HttpConfiguration" />을 제공합니다. </summary>
    </member>
    <member name="P:System.Web.Http.GlobalConfiguration.Configuration"></member>
    <member name="P:System.Web.Http.GlobalConfiguration.DefaultHandler">
      <summary> 모든 요청에 대해 호출될 기본 메시지 처리기를 가져옵니다. </summary>
    </member>
    <member name="T:System.Web.Http.RouteCollectionExtensions">
      <summary>
        <see cref="T:System.Web.Routing.RouteCollection" />에 대한 확장 메서드입니다.</summary>
    </member>
    <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
      <summary>지정된 경로 템플릿을 매핑합니다.</summary>
      <returns>매핑된 경로에 대한 참조입니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="name">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
    </member>
    <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>지정된 경로 템플릿을 매핑하고 기본 경로를 설정합니다.</summary>
      <returns>매핑된 경로에 대한 참조입니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="name">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 값을 포함하는 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>지정된 경로 템플릿을 매핑하고 기본 경로 값과 제약 조건을 설정합니다.</summary>
      <returns>매핑된 경로에 대한 참조입니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="name">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 값을 포함하는 개체입니다.</param>
      <param name="constraints">routeTemplate에 대한 값을 지정하는 식의 집합입니다.</param>
    </member>
    <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
      <summary>지정된 경로 템플릿을 매핑하고 기본 경로 값, 제약 조건 및 끝점 메시지 처리기를 설정합니다.</summary>
      <returns>매핑된 경로에 대한 참조입니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="name">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 값을 포함하는 개체입니다.</param>
      <param name="constraints">routeTemplate에 대한 값을 지정하는 식의 집합입니다.</param>
      <param name="handler">요청이 발송될 처리기입니다.</param>
    </member>
    <member name="T:System.Web.Http.WebHost.HttpControllerHandler">
      <summary>
        <see cref="T:System.Web.Http.HttpServer" /> 파이프라인에 ASP.NET 요청을 전달하고 다시 그 결과를 쓰는 <see cref="T:System.Web.IHttpAsyncHandler" />입니다. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.#ctor(System.Web.Routing.RouteData)">
      <summary>
        <see cref="T:System.Web.Http.WebHost.HttpControllerHandler" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="routeData">경로 데이터입니다.</param>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary> 요청을 처리하기 시작합니다. </summary>
      <returns>프로세스의 상태에 대한 정보를 포함하는 <see cref="T:System.IAsyncResult" />입니다. </returns>
      <param name="httpContextBase">HTTP 컨텍스트 기반입니다.</param>
      <param name="callback">콜백입니다.</param>
      <param name="state">상태입니다.</param>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.EndProcessRequest(System.IAsyncResult)">
      <summary> 끝을 처리할 때 비동기 프로세스 End 메서드를 제공합니다. </summary>
      <param name="result">프로세스의 상태에 대한 정보를 포함하는 <see cref="T:System.IAsyncResult" />입니다.</param>
    </member>
    <member name="P:System.Web.Http.WebHost.HttpControllerHandler.IsReusable">
      <summary> 다른 요청에서 <see cref="T:System.Web.IHttpHandler" /> 인스턴스를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.ProcessRequest(System.Web.HttpContextBase)">
      <summary> 요청을 처리합니다. </summary>
      <param name="httpContextBase">HTTP 컨텍스트 기반입니다.</param>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary> 요청을 처리하기 시작합니다. </summary>
      <returns>프로세스의 상태에 대한 정보를 포함하는 <see cref="T:System.IAsyncResult" />입니다. </returns>
      <param name="httpContext">HTTP 컨텍스트입니다.</param>
      <param name="callback">콜백입니다.</param>
      <param name="state">상태입니다.</param>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary> 끝을 처리할 때 비동기 프로세스 End 메서드를 제공합니다. </summary>
      <param name="result">프로세스의 상태에 대한 정보를 포함하는 <see cref="T:System.IAsyncResult" />입니다.</param>
    </member>
    <member name="P:System.Web.Http.WebHost.HttpControllerHandler.System#Web#IHttpHandler#IsReusable">
      <summary> 다른 요청에서 <see cref="T:System.Web.IHttpHandler" /> 인스턴스를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
      <summary> 요청을 처리합니다. </summary>
      <param name="httpContext">HTTP 컨텍스트 기반입니다.</param>
    </member>
    <member name="T:System.Web.Http.WebHost.HttpControllerRouteHandler">
      <summary> 지정된 <see cref="T:System.Web.Http.HttpServer" /> 인스턴스에 요청을 전달할 수 있는 <see cref="T:System.Web.Http.WebHost.HttpControllerHandler" />의 인스턴스를 반환하는 <see cref="T:System.Web.Routing.IRouteHandler" />입니다. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Http.WebHost.HttpControllerRouteHandler" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary> 요청을 처리하는 개체를 제공합니다. </summary>
      <returns> 요청을 처리하는 개체입니다. </returns>
      <param name="requestContext">요청에 대한 정보를 캡슐화하는 개체입니다.</param>
    </member>
    <member name="P:System.Web.Http.WebHost.HttpControllerRouteHandler.Instance">
      <summary> singleton <see cref="T:System.Web.Http.WebHost.HttpControllerRouteHandler" /> 인스턴스를 가져옵니다. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary> 요청을 처리하는 개체를 제공합니다. </summary>
      <returns> 요청을 처리하는 개체입니다. </returns>
      <param name="requestContext">요청에 대한 정보를 캡슐화하는 개체입니다.</param>
    </member>
    <member name="T:System.Web.Http.WebHost.PreApplicationStartCode">
      <summary>단순 멤버 자격 응용 프로그램 시작 전 코드에 대한 등록 지점을 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.WebHost.PreApplicationStartCode.Start">
      <summary>단순 멤버 자격 응용 프로그램 시작 전 코드를 등록합니다.</summary>
    </member>
    <member name="T:System.Web.Http.WebHost.WebHostBufferPolicySelector">
      <summary>웹 호스트 버퍼 정책 선택기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.#ctor">
      <summary>
        <see cref="T:System.Web.Http.WebHost.WebHostBufferPolicySelector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
      <summary>호스트가 HTTP 요청의 엔터티 본문을 버퍼링해야 하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>버퍼링을 사용해야 하면 true이고, 그렇지 않으면 스트리밍된 요청을 사용해야 합니다.</returns>
      <param name="hostContext">호스트 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
      <summary>웹 호스트에 버퍼링된 출력 스트림을 사용합니다.</summary>
      <returns>버퍼링된 출력 스트림입니다.</returns>
      <param name="response">응답입니다.</param>
    </member>
  </members>
</doc>