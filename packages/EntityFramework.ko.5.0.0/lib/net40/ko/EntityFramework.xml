<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>데이터베이스가 없는 경우에만 데이터베이스를 다시 만들고 선택적으로 데이터베이스를 데이터로 다시 시드할 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />의 구현입니다. 데이터베이스를 시드하려면 파생 클래스를 만들고 Seed 메서드를 재정의합니다. </summary>
      <typeparam name="TContext">컨텍스트의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다. </summary>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>재정의되면 시드를 위해 컨텍스트에 데이터를 추가합니다.  기본 구현은 아무 작업도 수행하지 않습니다. </summary>
      <param name="context">시드할 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.DbContext" /> 개체에서 가져오며 <see cref="T:System.Data.Entity.DbContext" /> 또는 연결을 지원하는 실제 데이터베이스를 관리하는 데 사용할 수 있습니다. 여기에는 데이터베이스를 만들고 삭제하는 작업과 데이터베이스가 있는지 확인하는 작업이 포함됩니다. 데이터베이스를 삭제하고 데이터베이스가 있는지 확인하는 작업은 이 클래스의 정적 메서드를 사용하여 전체 컨텍스트 없이 연결만 사용하여 수행할 수 있습니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>컨텍스트에 모델 해시가 있고 데이터베이스에 모델 해시가 포함되어 있으며 이러한 해시가 일치하는 경우 이 메서드는 true를 반환합니다.  이는 데이터베이스를 만드는 데 사용된 모델이 현재 모델과 동일하므로 두 모델을 함께 사용할 수 있음을 나타냅니다. </summary>
      <returns>컨텍스트와 데이터베이스의 모델 해시가 일치하면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="throwIfNoMetadata">true로 설정된 경우 모델 메타데이터가 컨텍스트와 연결된 모델이나 데이터베이스 자체에 없으면 예외가 throw됩니다.  false로 설정된 경우 메타데이터가 없으면 이 메서드는 true를 반환합니다.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>이 컨텍스트에서 사용하는 연결을 반환합니다.  이로 인해 컨텍스트가 초기화되고 연결이 없는 경우 만들어질 수 있습니다. </summary>
      <returns>이 컨텍스트에서 사용하는 연결입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>지원하는 컨텍스트에 정의된 모델에 대한 새 데이터베이스를 데이터베이스 서버에 만듭니다. 데이터베이스 초기화 전략이 실행되기 전에 이 메서드를 호출하면 해당 전략을 실행할 수 없습니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>동일한 이름의 데이터베이스가 서버에 없는 경우에만 지원하는 컨텍스트에 정의된 모델에 대한 새 데이터베이스를 데이터베이스 서버에 만듭니다. </summary>
      <returns>데이터베이스가 없고 만들어졌으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>데이터베이스 이름이나 연결 문자열에서만 <see cref="T:System.Data.Common.DbConnection" />을 만들 때 사용할 연결 팩터리입니다. </summary>
      <returns>사용할 연결 팩터리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>데이터베이스 서버에 데이터베이스가 있으면 데이터베이스를 삭제하고, 그렇지 않으면 아무 작업도 수행하지 않습니다. </summary>
      <returns>데이터베이스가 있고 삭제되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>데이터베이스 서버에 데이터베이스가 있으면 데이터베이스를 삭제하고, 그렇지 않으면 아무 작업도 수행하지 않습니다. </summary>
      <returns>데이터베이스가 있고 삭제되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="existingConnection">데이터베이스에 대한 기존 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>데이터베이스 서버에 데이터베이스가 있으면 데이터베이스를 삭제하고, 그렇지 않으면 아무 작업도 수행하지 않습니다. 데이터베이스에 대한 연결이 <see cref="T:System.Data.Entity.DbContext" /> 클래스에 대한 설명서에 설명된 것과 동일한 방식으로 지정된 데이터베이스 이름이나 연결 문자열을 사용하여 만들어집니다. </summary>
      <returns>데이터베이스가 있고 삭제되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름이나 데이터베이스에 대한 연결 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>지정된 데이터베이스가 현재 데이터베이스와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 데이터베이스가 현재 데이터베이스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 데이터베이스입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>데이터베이스에 대해 지정된 DDL/DML 명령을 실행합니다. </summary>
      <returns>명령을 실행한 후 데이터베이스에서 반환된 결과입니다.</returns>
      <param name="sql">명령 문자열입니다.</param>
      <param name="parameters">명령 문자열에 적용할 매개 변수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>데이터베이스가 서버에 있는지 여부를 확인합니다. </summary>
      <returns>데이터베이스가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>데이터베이스가 서버에 있는지 여부를 확인합니다. </summary>
      <returns>데이터베이스가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="existingConnection">데이터베이스에 대한 기존 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>데이터베이스가 서버에 있는지 여부를 확인합니다. 데이터베이스에 대한 연결이 <see cref="T:System.Data.Entity.DbContext" /> 클래스에 대한 설명서에 설명된 것과 동일한 방식으로 지정된 데이터베이스 이름이나 연결 문자열을 사용하여 만들어집니다. </summary>
      <returns>데이터베이스가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름이나 데이터베이스에 대한 연결 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>지정된 데이터베이스의 해시 함수를 반환합니다.</summary>
      <returns>지정된 데이터베이스의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>현재 데이터베이스의 형식을 가져옵니다.</summary>
      <returns>현재 데이터베이스의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>이 컨텍스트에서 등록된 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />를 실행합니다.  <paramref name="force" /> 매개 변수를 true로 설정한 경우 이니셜라이저가 이전의 실행 여부와 관계없이 실행됩니다.  이는 데이터베이스가 응용 프로그램이 실행되는 동안 삭제되고 다시 초기화되어야 하는 경우에 유용할 수 있습니다. </summary>
      <param name="force">true로 설정되면 이니셜라이저가 이미 실행된 경우에도 실행됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>데이터베이스 초기화 전략을 가져오거나 설정합니다. 데이터베이스 초기화 전략은 <see cref="T:System.Data.Entity.DbContext" /> 인스턴스가 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />에서 초기화될 때 호출됩니다.  </summary>
      <param name="strategy">전략입니다.</param>
      <typeparam name="TContext">컨텍스트의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>지정된 제네릭 형식의 요소를 반환할 원시 SQL 쿼리를 만듭니다. 이 형식은 쿼리에서 반환된 열의 이름과 일치하는 속성이 있는 형식이거나 단순한 기본 형식일 수 있습니다. </summary>
      <returns>열거될 때 쿼리를 실행할 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체입니다.</returns>
      <param name="sql">SQL 쿼리 문자열입니다.</param>
      <param name="parameters">SQL 쿼리 문자열에 적용할 매개 변수입니다.</param>
      <typeparam name="TElement">쿼리에서 반환된 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>지정된 형식의 요소를 반환할 원시 SQL 쿼리를 만듭니다. 이 형식은 쿼리에서 반환된 열의 이름과 일치하는 속성이 있는 형식이거나 단순한 기본 형식일 수 있습니다. </summary>
      <returns>열거될 때 쿼리를 실행할 <see cref="T:System.Collections.IEnumerable" /> 개체입니다.</returns>
      <param name="elementType">쿼리에서 반환된 개체의 형식입니다.</param>
      <param name="sql">SQL 쿼리 문자열입니다.</param>
      <param name="parameters">SQL 쿼리 문자열에 적용할 매개 변수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>데이터베이스의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>엔터티 데이터를 개체로 쿼리 및 사용할 수 있는 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>연결이 만들어질 데이터베이스의 이름을 만들기 위해 규칙을 사용하여 새 컨텍스트 인스턴스를 생성합니다.  규칙에 따라 이 이름은 파생 컨텍스트 클래스의 전체 이름(네임스페이스 + 클래스 이름)입니다. 이 방식으로 연결을 만드는 방법에 대한 자세한 내용은 <see cref="T:System.Data.Entity.DbContext" />의 설명 부분을 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>데이터베이스에 연결하기 위해 기존 연결을 사용하여 새 컨텍스트 인스턴스를 생성합니다. 연결은 컨텍스트가 삭제될 때 삭제되지 않습니다. </summary>
      <param name="existingConnection">새 컨텍스트에 사용할 기존 연결입니다.</param>
      <param name="contextOwnsConnection">true로 설정되면 컨텍스트가 삭제될 때 연결이 삭제되고, 그렇지 않으면 호출자가 연결을 삭제해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>데이터베이스에 연결하기 위해 기존 연결을 사용하여 새 컨텍스트 인스턴스를 생성하고 지정된 모델에서 초기화합니다. 연결은 컨텍스트가 삭제될 때 삭제되지 않습니다. </summary>
      <param name="existingConnection">새 컨텍스트에 사용할 기존 연결입니다.</param>
      <param name="model">이 컨텍스트를 지원할 모델입니다.</param>
      <param name="contextOwnsConnection">true로 설정되면 컨텍스트가 삭제될 때 연결이 삭제되고, 그렇지 않으면 호출자가 연결을 삭제해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>연결이 만들어질 데이터베이스의 이름을 만들기 위해 규칙을 사용하여 새 컨텍스트 인스턴스를 생성하고 지정된 모델에서 초기화합니다. 규칙에 따라 이 이름은 파생 컨텍스트 클래스의 전체 이름(네임스페이스 + 클래스 이름)입니다. 이 방식으로 연결을 만드는 방법에 대한 자세한 내용은 <see cref="T:System.Data.Entity.DbContext" />의 설명 부분을 참조하십시오.</summary>
      <param name="model">이 컨텍스트를 지원할 모델입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
      <summary>기존 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> 안에 새 컨텍스트 인스턴스를 생성합니다.  </summary>
      <param name="objectContext">새 컨텍스트를 래핑할 기존 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />입니다.</param>
      <param name="dbContextOwnsObjectContext">true로 설정되면 <see cref="T:System.Data.Entity.DbContext" />가 삭제될 때 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />가 삭제되고, 그렇지 않으면 호출자가 연결을 삭제해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>지정된 문자열을 연결이 만들어질 데이터베이스의 이름 또는 연결 문자열로 사용하여 새 컨텍스트 인스턴스를 생성합니다. 이 방식으로 연결을 만드는 방법에 대한 자세한 내용은 <see cref="T:System.Data.Entity.DbContext" />의 설명 부분을 참조하십시오.</summary>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>지정된 문자열을 연결이 만들어질 데이터베이스의 이름 또는 연결 문자열로 사용하여 새 컨텍스트 인스턴스를 생성하고 지정된 모델에서 초기화합니다. 이 방식으로 연결을 만드는 방법에 대한 자세한 내용은 <see cref="T:System.Data.Entity.DbContext" />의 설명 부분을 참조하십시오. </summary>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
      <param name="model">이 컨텍스트를 지원할 모델입니다.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>엔터티의 변경 내용 추적을 처리하는 컨텍스트의 기능에 액세스할 수 있도록 합니다. </summary>
      <returns>변경 내용 추적을 처리하는 기능에 액세스하는 데 사용되는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>컨텍스트의 구성 옵션에 액세스할 수 있도록 합니다. </summary>
      <returns>구성 옵션에 액세스하는 데 사용되는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>이 컨텍스트의 데이터베이스 인스턴스를 만들고 기본 데이터베이스의 생성, 삭제 또는 존재 확인을 수행할 수 있도록 합니다. </summary>
      <returns>만들어진 데이터베이스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>protected Dispose 메서드를 호출합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>컨텍스트를 삭제합니다. 이 컨텍스트에서 만들어졌거나 이 컨텍스트가 만들어질 때 소유권이 이 컨텍스트에 전달된 기본 <see cref="T:System.Data.Objects.ObjectContext" />도 삭제됩니다. 이 컨텍스트에서 만들어졌거나 이 컨텍스트가 만들어질 때 소유권이 이 컨텍스트에 전달된 데이터베이스에 대한 연결(<see cref="T:System.Data.Common.DbConnection" /> 개체)도 삭제됩니다. </summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>엔터티에 대한 정보에 액세스할 수 있도록 하고 엔터티에 대한 작업을 수행하는 기능을 제공하는 지정된 엔터티에 대한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 개체를 가져옵니다. </summary>
      <returns>엔터티의 항목입니다.</returns>
      <param name="entity">엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>엔터티에 대한 정보에 액세스할 수 있도록 하고 엔터티에 대한 작업을 수행하는 기능을 제공하는 지정된 엔터티에 대한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 개체를 가져옵니다. </summary>
      <returns>엔터티의 항목입니다.</returns>
      <param name="entity">엔터티입니다.</param>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>지정된 컨텍스트가 현재 컨텍스트와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 컨텍스트가 현재 컨텍스트와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 컨텍스트입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>지정된 컨텍스트의 해시 함수를 반환합니다.</summary>
      <returns>지정된 컨텍스트의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>현재 컨텍스트의 형식을 가져옵니다.</summary>
      <returns>현재 컨텍스트의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>추적된 엔터티의 유효성을 검사하고 유효성 검사 결과를 포함하는 <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />의 컬렉션을 반환합니다. </summary>
      <returns>잘못된 엔터티에 대한 유효성 검사 결과의 컬렉션입니다. 컬렉션은 null일 수 없으며 null 값이나 유효한 엔터티에 대한 결과를 포함해서는 안 됩니다. </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>이 메서드는 파생 컨텍스트의 모델이 초기화되었을 때 모델이 잠기고 컨텍스트를 초기화하는 데 사용되기 전에 호출됩니다.  이 메서드의 기본 구현은 아무 작업도 수행하지 않지만 모델이 잠기기 전에 모델을 더 세부적으로 제어할 수 있도록 이 메서드의 기본 구현을 파생 클래스에서 재정의할 수 있습니다. </summary>
      <param name="modelBuilder">만들어지는 컨텍스트의 모델을 정의하는 작성기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>이 컨텍스트에서 기본 데이터베이스에 수행된 모든 변경 내용을 저장합니다. </summary>
      <returns>기본 데이터베이스에 기록된 개체의 수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>지정된 형식에 대해 <see cref="T:System.Data.Entity.DbSet" />을 반환하고 컨텍스트에서 지정된 엔터티에 대해 CRUD 작업을 수행할 수 있게 해줍니다. </summary>
      <returns>지정된 엔터티 형식의 <see cref="T:System.Data.Entity.DbSet" /> 인스턴스입니다.</returns>
      <typeparam name="TEntity">집합이 반환되어야 하는 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>지정된 형식에 대해 <see cref="T:System.Data.Entity.DbSet" />을 반환하고 컨텍스트에서 지정된 엔터티에 대해 CRUD 작업을 수행할 수 있게 해줍니다. </summary>
      <returns>지정된 엔터티 형식에 대한 <see cref="T:System.Data.Entity.DbSet" />입니다.</returns>
      <param name="entityType">집합이 반환되어야 하는 엔터티의 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>사용자가 추가되고 수정된 엔터티의 유효성만 검사하는 기본 동작을 재정의할 수 있도록 하는 확장 지점입니다. </summary>
      <returns>유효성 검사를 진행하려면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="entityEntry">유효성을 검사할 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>이 컨텍스트의 기반이 되는 Entity Framework <see cref="T:System.Data.Objects.ObjectContext" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectContext" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>컨텍스트의 문자열 표현을 반환합니다.</summary>
      <returns>컨텍스트의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>사용자가 엔터티의 유효성 검사를 사용자 지정하거나 유효성 검사 결과를 필터링하여 제외시킬 수 있도록 하는 확장 지점입니다. <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />에 의해 호출됩니다. </summary>
      <returns>엔터티 유효성 검사 결과입니다. 재정의된 경우 null일 수 있습니다.</returns>
      <param name="entityEntry">유효성을 검사할 DbEntityEntry 인스턴스입니다.</param>
      <param name="items">사용자 지정 유효성 검사에 대한 추가 정보를 포함하는 사용자 정의 사전입니다. 이 사전은 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />에 전달되고 <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />로 노출됩니다. 이 매개 변수는 선택적 요소이며 null일 수 있습니다.</param>
    </member>
    <member name="T:System.Data.Entity.DbExtensions">
      <summary>일반적인 작업에 도움이 되는 확장 메서드의 집합을 포함합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" /> 또는 <see cref="T:System.Data.Objects.ObjectContext" />에서 캐시되지 않을 새 쿼리를 반환합니다. </summary>
      <returns>NoTracking이 적용된 새 쿼리이거나, NoTracking이 지원되지 않는 경우 소스 쿼리입니다.</returns>
      <param name="source">소스 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" /> 또는 <see cref="T:System.Data.Objects.ObjectContext" />에서 캐시되지 않을 새 쿼리를 반환합니다. </summary>
      <returns>NoTracking이 적용된 새 쿼리이거나, NoTracking이 지원되지 않는 경우 소스 쿼리입니다.</returns>
      <param name="source">소스 쿼리입니다.</param>
      <typeparam name="T">요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 새 IQueryable입니다.</returns>
      <param name="source">Include를 호출할 소스 IQueryable입니다.</param>
      <param name="path">쿼리 결과에 반환할 관련 개체의 목록입니다(점으로 구분됨).</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 T의 새 IQueryable입니다.</returns>
      <param name="source">Include를 호출할 소스 IQueryable입니다.</param>
      <param name="path">포함할 경로를 나타내는 람다 식입니다.</param>
      <typeparam name="T">쿼리되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">포함되는 탐색 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 T의 새 IQueryable입니다.</returns>
      <param name="source">Include를 호출할 소스 IQueryable입니다.</param>
      <param name="path">쿼리 결과에 반환할 관련 개체의 목록입니다(점으로 구분됨).</param>
      <typeparam name="T">쿼리되는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
      <summary>쿼리의 결과를 열거하는 IQueryable에 대한 확장 메서드입니다. 이 동작은 실제로 목록을 만들지 않고 ToList를 호출하는 것과 같습니다. </summary>
      <param name="source">소스 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary> 지정된 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />과 동기화 상태로 유지되는 <see cref="T:System.ComponentModel.BindingList`1" /> 구현을 반환합니다. </summary>
      <returns>바인딩 목록입니다.</returns>
      <param name="source">바인딩 목록이 동기화 상태로 유지될 컬렉션입니다.</param>
      <typeparam name="T">요소 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />는 CLR 클래스를 데이터베이스 스키마에 매핑하는 데 사용됩니다. EDM(엔터티 데이터 모델) 모델을 빌드하는 이 코드 중심 방법을 Code First라고 합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 클래스의 새 인스턴스를 초기화합니다. 초기 모델을 검색하는 프로세스에서는 컴퓨터에 설치된 최신 버전의 Entity Framework에 포함된 규칙의 집합을 사용합니다.  </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>특정 규칙 집합을 사용하여 초기 모델을 검색할 <see cref="T:System.Data.Entity.DbModelBuilder" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="modelBuilderVersion">사용할 규칙의 버전입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>이 작성기를 사용하여 수행된 구성을 기반으로 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />을 만듭니다. 생성된 모델의 데이터베이스 계층에 영향을 미치므로 사용되는 데이터베이스 공급자를 확인하는 데 연결이 사용됩니다. </summary>
      <returns>빌드된 모델입니다.</returns>
      <param name="providerConnection">공급자 정보를 확인하는 데 사용할 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>이 작성기를 사용하여 수행된 구성을 기반으로 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />을 만듭니다. 생성된 모델의 데이터베이스 계층에 영향을 미치기 때문에 공급자 정보를 지정해야 합니다. SqlClient의 경우 고정 이름은 'System.Data.SqlClient'이고 매니페스트 토큰은 버전 연도(예: '2005' 또는 '2008')입니다. </summary>
      <returns>빌드된 모델입니다.</returns>
      <param name="providerInfo">모델과 함께 사용할 데이터베이스 공급자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>모델에서 복합 형식으로 형식을 등록하고 복합 형식을 구성하는 데 사용할 수 있는 개체를 반환합니다. 이 메서드를 동일한 형식에 대해 여러 번 호출하여 여러 줄의 구성을 수행할 수 있습니다. </summary>
      <returns>지정된 복합 형식에 대한 구성 개체입니다.</returns>
      <typeparam name="TComplexType">등록하거나 구성할 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>이 <see cref="T:System.Data.Entity.DbModelBuilder" />의 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />를 가져옵니다.  등록자는 파생 엔터티 및 복합 형식 구성이 이 작성기를 사용하여 등록될 수 있도록 합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" />의 구성입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>규칙을 처리하는 이 <see cref="T:System.Data.Entity.DbModelBuilder" />의 설정에 액세스할 수 있도록 합니다. </summary>
      <returns>설정에 대한 액세스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>모델의 일부로 엔터티 형식을 등록하고 엔터티를 구성하는 데 사용할 수 있는 개체를 반환합니다. 이 메서드를 동일한 엔터티에 대해 여러 번 호출하여 여러 줄의 구성을 수행할 수 있습니다. </summary>
      <returns>지정된 엔터티 형식에 대한 구성 개체입니다.</returns>
      <typeparam name="TEntityType">등록하거나 구성할 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>지정된 모델 작성기가 현재 모델 작성기와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 모델 작성기가 현재 모델 작성기와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 모델 작성기입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>지정된 모델 작성기의 해시 함수를 반환합니다.</summary>
      <returns>지정된 모델 작성기의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>현재 모델 작성기의 형식을 가져옵니다.</summary>
      <returns>현재 모델 작성기의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>모델에서 하나의 형식을 제외합니다. 초기 모델 검색 중에 규칙에 따라 추가된 형식을 모델에서 제거하는 데 사용됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.DbModelBuilder" /> 인스턴스입니다.</returns>
      <typeparam name="T">제외할 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>모델에서 하나 이상의 형식을 제외합니다. 초기 모델 검색 중에 규칙에 따라 추가된 형식을 모델에서 제거하는 데 사용됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.DbModelBuilder" /> 인스턴스입니다.</returns>
      <param name="types">모델에서 제외할 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>모델 작성기의 문자열 표현을 반환합니다.</summary>
      <returns>모델 작성기의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>이 열거형의 값은 <see cref="T:System.Data.Entity.DbModelBuilder" /> 클래스에 직접 제공되거나 <see cref="T:System.Data.Entity.DbContext" />에서 파생된 클래스에 적용된 <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />에서 사용될 수 있습니다. 사용된 값은 코드에서 모델을 빌드할 때 사용해야 하는 <see cref="T:System.Data.Entity.DbContext" /> 및 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙의 버전을 정의합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 및 <see cref="T:System.Data.Entity.DbContext" /> 규칙의 최신 버전을 사용해야 하도록 나타냅니다. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>Entity Framework v4.1과 함께 제공된 <see cref="T:System.Data.Entity.DbModelBuilder" /> 및 <see cref="T:System.Data.Entity.DbContext" /> 규칙의 버전을 사용해야 하도록 나타냅니다. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>.Net Framework 4를 대상으로 지정할 경우 Entity Framework v5.0과 함께 제공된 <see cref="T:System.Data.Entity.DbModelBuilder" /> 및 <see cref="T:System.Data.Entity.DbContext" /> 규칙의 버전을 사용해야 하도록 나타냅니다. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>Entity Framework v5.0과 함께 제공된 <see cref="T:System.Data.Entity.DbModelBuilder" /> 및 <see cref="T:System.Data.Entity.DbContext" /> 규칙의 버전을 사용해야 하도록 나타냅니다. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>이 특성을 <see cref="T:System.Data.Entity.DbContext" />에서 파생된 클래스에 적용하여 코드에서 모델을 빌드할 때 사용해야 하는 <see cref="T:System.Data.Entity.DbContext" /> 및 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙의 버전을 설정할 수 있습니다. <see cref="T:System.Data.Entity.DbModelBuilder" /> 버전에 대한 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> 열거형을 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="version">사용할 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙 버전입니다.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙 버전을 가져옵니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙 버전입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>생성, 읽기, 업데이트 및 삭제 작업을 수행하기 위해 사용되는 엔터티 집합을 나타냅니다. 엔터티의 형식이 빌드 시 알려지지 않은 경우 사용할 수 있는 <see cref="T:System.Data.Entity.DbSet`1" />의 제네릭이 아닌 버전입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>
        <see cref="F:System.Data.EntityState.Added" /> 상태의 컨텍스트에 지정된 엔터티를 추가합니다. 변경 내용을 저장할 때 Added 상태의 엔터티가 데이터베이스에 삽입됩니다. 변경 내용이 저장된 후에는 개체 상태가 <see cref="F:System.Data.EntityState.Unchanged" />로 변경됩니다.</summary>
      <returns>엔터티입니다.</returns>
      <param name="entity">추가할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>
        <see cref="F:System.Data.EntityState.Unchanged" />의 컨텍스트에 지정된 엔터티를 연결합니다.</summary>
      <returns>엔터티입니다.</returns>
      <param name="entity">연결할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.DbSet`1" /> 개체를 반환합니다. </summary>
      <returns>제네릭 집합 개체입니다.</returns>
      <typeparam name="TEntity">제네릭 집합 개체로 캐스트할 개체의 기본 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>이 집합의 형식에 대해 엔터티의 새 인스턴스를 만듭니다. 이 인스턴스는 집합에 추가되거나 연결되지 않습니다. 기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다. </summary>
      <returns>프록시일 수 있는 엔터티 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>이 집합의 형식 또는 이 집합의 형식에서 파생된 형식에 대한 엔터티의 새 인스턴스를 만듭니다. 이 인스턴스는 집합에 추가되거나 연결되지 않습니다. 기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다. </summary>
      <returns>프록시일 수 있는 엔터티 인스턴스입니다. </returns>
      <param name="derivedEntityType">파생 엔터티 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>지정된 집합이 현재 집합과 같은지 여부를 반환합니다.</summary>
      <returns>지정된 개체가 현재 집합과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 집합입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>기본 키 값을 사용하여 컨텍스트로 추적되는 엔터티를 찾으려고 시도합니다. 엔터티가 컨텍스트에 없으면 쿼리가 데이터 소스에 있는 데이터에 대해 실행 및 평가되고 컨텍스트 또는 데이터 소스에서 해당 엔터티를 찾을 수 없으면 null이 반환됩니다. Find는 컨텍스트에 추가되었지만 아직 데이터베이스에 저장되지 않은 엔터티도 반환합니다.</summary>
      <returns>찾은 엔터티 또는 null입니다.</returns>
      <param name="keyValues">찾을 엔터티의 기본 키 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>지정된 집합의 해시 함수를 반환합니다.</summary>
      <returns>지정된 집합의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>현재 집합의 형식을 가져옵니다.</summary>
      <returns>현재 집합의 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>컨텍스트에 의해 현재 추적 중이고 Deleted로 표시되지 않은 엔터티 집합을 나타내는 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />을 반환합니다. 로컬 속성에 액세스해도 데이터베이스에 쿼리를 전송하지 않습니다. 이 속성은 일반적으로 쿼리가 이미 실행된 후에 사용됩니다.</summary>
      <returns>로컬 뷰입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>지정된 엔터티를 <see cref="F:System.Data.EntityState.Deleted" />로 표시합니다. 변경 내용을 저장하면 엔터티가 데이터베이스에서 삭제됩니다. 이 메서드가 호출되기 전에 다른 상태의 엔터티가 컨텍스트에 있어야 합니다. </summary>
      <returns>엔터티입니다.</returns>
      <param name="entity">제거할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>이 집합에 엔터티를 반환할 원시 SQL 쿼리를 만듭니다. 기본적으로 반환된 엔터티는 컨텍스트에서 추적됩니다. 이는 이 메서드에서 반환된 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />에 대해 AsNoTracking을 호출하여 변경할 수 있습니다. </summary>
      <returns>열거될 때 쿼리를 실행할 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 개체입니다.</returns>
      <param name="sql">SQL 쿼리 문자열입니다.</param>
      <param name="parameters">SQL 쿼리 문자열에 적용할 매개 변수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>생성, 읽기, 업데이트 및 삭제 작업을 수행하기 위해 사용되는 형식이 지정된 엔터티 집합을 나타냅니다. DbSet은 공개적으로 생성할 수 없으며 <see cref="T:System.Data.Entity.DbContext" /> 인스턴스에서만 생성할 수 있습니다. </summary>
      <typeparam name="TEntity">집합을 정의하는 형식입니다. 형식은 기본 형식뿐만 아니라 파생된 형식일 수 있습니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>
        <see cref="F:System.Data.EntityState.Added" /> 상태의 컨텍스트에 지정된 엔터티를 추가합니다. 변경 내용을 저장할 때 Added 상태의 엔터티가 데이터베이스에 삽입됩니다. 변경 내용이 저장된 후에는 개체 상태가 <see cref="F:System.Data.EntityState.Unchanged" />로 변경됩니다.</summary>
      <returns>
        <see cref="{0}" />을 반환합니다.</returns>
      <param name="entity">추가할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>
        <see cref="F:System.Data.EntityState.Unchanged" />의 컨텍스트에 지정된 엔터티를 연결합니다.</summary>
      <returns>
        <see cref="{0}" />을 반환합니다.</returns>
      <param name="entity">연결할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>이 집합의 형식 또는 이 집합의 형식에서 파생된 형식에 대한 엔터티의 새 인스턴스를 만듭니다. 이 인스턴스는 집합에 추가되거나 연결되지 않습니다. 기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다. </summary>
      <returns>
        <see cref="{0}" />을 반환합니다.</returns>
      <typeparam name="TDerivedEntity">집합을 정의하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>이 집합의 형식에 대해 엔터티의 새 인스턴스를 만듭니다. 이 인스턴스는 집합에 추가되거나 연결되지 않습니다. 기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다. </summary>
      <returns>
        <see cref="{0}" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>지정된 개체가 현재 집합과 같은지 여부를 반환합니다.</summary>
      <returns>지정된 집합이 현재 집합과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 집합입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>기본 키 값을 사용하여 컨텍스트로 추적되는 엔터티를 찾으려고 시도합니다. 엔터티가 컨텍스트에 없으면 쿼리가 데이터 소스에 있는 데이터에 대해 실행 및 평가되고 컨텍스트 또는 데이터 소스에서 해당 엔터티를 찾을 수 없으면 null이 반환됩니다. Find는 컨텍스트에 추가되었지만 아직 데이터베이스에 저장되지 않은 엔터티도 반환합니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
      <param name="keyValues">찾을 엔터티의 기본 키 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>지정된 집합의 해시 함수를 반환합니다.</summary>
      <returns>지정된 집합의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>현재 집합의 형식을 가져옵니다.</summary>
      <returns>현재 집합의 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>컨텍스트에 의해 현재 추적 중이고 Deleted로 표시되지 않은 엔터티 집합을 나타내는 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />을 반환합니다. 로컬 속성에 액세스해도 데이터베이스에 쿼리를 전송하지 않습니다. 이 속성은 일반적으로 쿼리가 이미 실행된 후에 사용됩니다.</summary>
      <returns>로컬 뷰입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>제네릭이 아닌 동일한 <see cref="T:System.Data.Entity.DbSet" />을 반환합니다.</summary>
      <returns>제네릭이 아닌 집합 개체인 <see cref="T:System.Data.Entity.DbSet" />을 반환합니다.</returns>
      <param name="entry">제네릭이 아닌 동일한 <see cref="T:System.Data.Entity.DbSet" />이 반환될 항목입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>지정된 엔터티를 <see cref="F:System.Data.EntityState.Deleted" />로 표시합니다. 변경 내용을 저장하면 엔터티가 데이터베이스에서 삭제됩니다. 이 메서드가 호출되기 전에 다른 상태의 엔터티가 컨텍스트에 있어야 합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.DbSet" />을 반환합니다.</returns>
      <param name="entity">제거할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>이 집합에 엔터티를 반환할 원시 SQL 쿼리를 만듭니다. 기본적으로 반환된 엔터티는 컨텍스트에서 추적됩니다. 이는 이 메서드에서 반환된 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />에 대해 AsNoTracking을 호출하여 변경할 수 있습니다. </summary>
      <returns>열거될 때 쿼리를 실행할 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 개체입니다.</returns>
      <param name="sql">SQL 쿼리 문자열입니다.</param>
      <param name="parameters">반환된 엔터티의 형식은 항상 이 집합의 형식이며 파생 형식이 아닙니다. 쿼리된 테이블에 다른 엔터티 형식의 데이터가 포함될 수 있는 경우 SQL 쿼리는 올바른 형식의 엔터티만 반환되도록 적절하게 작성되어야 합니다.SQL 쿼리 문자열에 적용할 매개 변수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>컨텍스트가 응용 프로그램 도메인에서 처음 사용될 때 항상 데이터베이스를 다시 만들고 선택적으로 데이터베이스를 데이터로 다시 시드할 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />의 구현입니다. 데이터베이스를 시드하려면 파생 클래스를 만들고 Seed 메서드를 재정의합니다. </summary>
      <typeparam name="TContext">컨텍스트의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다. </summary>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>재정의되면 시드를 위해 컨텍스트에 데이터를 추가합니다.  기본 구현은 아무 작업도 수행하지 않습니다. </summary>
      <param name="context">시드할 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>데이터베이스가 만들어진 후 모델이 변경된 경우에만 데이터베이스를 삭제하고, 다시 만들고, 선택적으로 데이터베이스를 데이터로 다시 시드할 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />의 구현입니다.  이 작업은 저장소 모델이 만들어질 때 저장소 모델의 해시를 데이터베이스에 작성한 다음 현재 모델에서 생성된 해시와 비교하여 수행됩니다. 데이터베이스를 시드하려면 파생 클래스를 만들고 Seed 메서드를 재정의합니다. </summary>
      <typeparam name="TContext">컨텍스트의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다. </summary>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>시드를 위해 실제로 컨텍스트에 데이터를 추가하도록 재정의되어야 합니다.  기본 구현은 아무 작업도 수행하지 않습니다. </summary>
      <param name="context">시드할 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>데이터베이스 이니셜라이저에 대한 메서드를 정의합니다.</summary>
      <typeparam name="TContext">컨텍스트의 형식입니다.이 유형 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 유형 또는 보다 적게 파생된 모든 유형을 사용할 수 있습니다. 공변(covariance) 및 반공변(contravariance)에 대한 자세한 내용은 을(를) 참조하십시오.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다. </summary>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>컨텍스트의 모든 엔터티 컬렉션이나 데이터베이스에서 쿼리될 수 있는, 지정된 형식의 엔터티 컬렉션을 나타냅니다. <see cref="T:System.Data.Entity.DbSet" />은 <see cref="T:System.Data.Entity.IDbSet`1" />의 구체적 구현입니다. </summary>
      <typeparam name="TEntity">집합을 정의하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>
        <see cref="F:System.Data.EntityState.Added" /> 상태의 컨텍스트에 지정된 엔터티를 추가합니다. 변경 내용을 저장할 때 Added 상태의 엔터티가 데이터베이스에 삽입됩니다. 변경 내용이 저장된 후에는 개체 상태가 <see cref="F:System.Data.EntityState.Unchanged" />로 변경됩니다.</summary>
      <returns>엔터티를 반환합니다.</returns>
      <param name="entity">추가할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>
        <see cref="F:System.Data.EntityState.Unchanged" />의 컨텍스트에 지정된 엔터티를 연결합니다.</summary>
      <returns>엔터티를 반환합니다.</returns>
      <param name="entity">연결할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>이 집합의 형식에 대해 엔터티의 새 인스턴스를 만듭니다. 이 인스턴스는 집합에 추가되거나 연결되지 않습니다. 기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다. </summary>
      <returns>프록시일 수 있는 엔터티 인스턴스를 반환합니다. </returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>이 집합의 형식 또는 이 집합의 형식에서 파생된 형식에 대한 엔터티의 새 인스턴스를 만듭니다. 이 인스턴스는 집합에 추가되거나 연결되지 않습니다. 기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다. </summary>
      <returns>프록시일 수 있는 엔터티 인스턴스를 반환합니다.</returns>
      <typeparam name="TDerivedEntity">만들 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>기본 키 값을 사용하여 컨텍스트로 추적되는 엔터티를 찾으려고 시도합니다. 엔터티가 컨텍스트에 없으면 쿼리가 데이터 소스에 있는 데이터에 대해 실행 및 평가되고 컨텍스트 또는 데이터 소스에서 해당 엔터티를 찾을 수 없으면 null이 반환됩니다. Find는 컨텍스트에 추가되었지만 아직 데이터베이스에 저장되지 않은 엔터티도 반환합니다.</summary>
      <returns>찾은 엔터티 또는 null을 반환합니다.</returns>
      <param name="keyValues">찾을 엔터티의 기본 키 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>컨텍스트에 의해 현재 추적 중이고 Deleted로 표시되지 않은 엔터티 집합을 나타내는 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />을 반환합니다. 로컬 속성에 액세스해도 데이터베이스에 쿼리를 전송하지 않습니다. 이 속성은 일반적으로 쿼리가 이미 실행된 후에 사용됩니다.</summary>
      <returns>로컬 뷰입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>지정된 엔터티를 <see cref="F:System.Data.EntityState.Deleted" />로 표시합니다. 변경 내용을 저장하면 엔터티가 데이터베이스에서 삭제됩니다. 이 메서드가 호출되기 전에 다른 상태의 엔터티가 컨텍스트에 있어야 합니다. </summary>
      <returns>엔터티를 반환합니다.</returns>
      <param name="entity">제거할 엔터티입니다.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Code First 마이그레이션을 사용하여 데이터베이스를 최신 마이그레이션으로 업데이트하는 IDatabaseInitializer 구현입니다.</summary>
      <typeparam name="TContext"></typeparam>
      <typeparam name="TMigrationsConfiguration"></typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary> MigrateDatabaseToLatestVersion 클래스의 새 인스턴스를 초기화합니다.  </summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary> 마이그레이션을 수행하기 위해 구성 파일의 특정 연결 문자열을 사용하여 데이터베이스에 연결하는 MigrateDatabaseToLatestVersion 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="connectionStringName">마이그레이션에 사용할 연결 문자열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다.</summary>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>엔터티의 변경 내용 추적과 관련된 컨텍스트의 기능에 액세스할 수 있도록 하기 위해 <see cref="T:System.Data.Entity.DbContext" />의 ChangeTracker 메서드에서 반환됩니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>POCO 엔터티의 관계와 속성에 수행된 변경 내용을 검색합니다.  <see cref="T:System.Data.Objects.DataClasses.EntityObject" />에서 파생되는 엔터티 및 변경 내용 추적 프록시와 같은 일부 형식의 엔터티는 변경 내용을 자동으로 보고하므로 이러한 형식의 엔터티에는 이 메서드의 호출이 일반적으로 필요하지 않습니다. 또한 일반적으로 이 메서드는 <see cref="T:System.Data.Entity.DbContext" />의 많은 메서드와 관련 클래스에서 자동으로 호출되므로 이 메서드를 명시적으로 호출할 필요는 거의 없습니다. 그러나 대개 성능상의 이유로 <see cref="P:System.Data.Entity.DbContext.Configuration" />에서 AutoDetectChangesEnabled 플래그를 사용하여 이 메서드의 이러한 자동 호출을 해제하는 것이 바람직할 수 있습니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>이 컨텍스트에서 추적된 모든 엔터티에 대한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 개체를 가져옵니다. </summary>
      <returns>항목입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>이 컨텍스트에서 추적된 지정된 형식의 모든 엔터티에 대한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 개체를 가져옵니다. </summary>
      <returns>항목입니다.</returns>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>지정된 추적 장치가 현재 추적 장치와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 추적 장치가 현재 추적 장치와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 추적 장치입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>지정된 추적 장치의 해시 함수를 반환합니다.</summary>
      <returns>지정된 추적 장치의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>현재 추적 장치의 형식을 가져옵니다.</summary>
      <returns>현재 추적 장치의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>추적 장치의 문자열 표현을 반환합니다.</summary>
      <returns>추적 장치의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 클래스의 제네릭이 아닌 버전입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 개체를 반환합니다. </summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TElement">컬렉션 요소의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>탐색 속성의 현재 값을 가져오거나 설정합니다.  현재 값은 탐색 속성이 참조하는 엔터티입니다. </summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>이 탐색 속성이 속하는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다. </summary>
      <returns>이 탐색 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>엔터티의 컬렉션이 데이터베이스에서 로드되었는지 여부를 나타내는 값을 가져옵니다. </summary>
      <returns>컬렉션이 로드되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>데이터베이스에서 엔터티의 컬렉션을 로드합니다. 컨텍스트에 이미 있는 엔터티는 데이터베이스의 값으로 덮어쓰이지 않습니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>속성 이름을 가져옵니다. </summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>데이터베이스에서 이 컬렉션을 로드하는 데 사용되는 쿼리를 반환합니다. 반환된 쿼리는 LINQ를 통해 수정하여 데이터베이스에서 필터링이나 작업을 수행할 수 있습니다. 예를 들어 데이터베이스에 있는 컬렉션의 엔터티를 실제로 로드하지 않고 그 수를 계산하는 작업을 수행할 수 있습니다. </summary>
      <returns>컬렉션에 대한 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />의 <see cref="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)" /> 메서드에서 반환되고 엔터티의 컬렉션 탐색 속성에 대해 수행할 로드와 같은 작업을 허용합니다. </summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TElement">엔터티의 컬렉션에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>탐색 속성의 현재 값을 가져오거나 설정합니다.  현재 값은 탐색 속성이 참조하는 엔터티입니다. </summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>이 탐색 속성이 속하는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다. </summary>
      <returns>이 탐색 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>엔터티의 컬렉션이 데이터베이스에서 로드되었는지 여부를 나타내는 값을 가져옵니다. </summary>
      <returns>컬렉션이 로드되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>데이터베이스에서 엔터티의 컬렉션을 로드합니다. 컨텍스트에 이미 있는 엔터티는 데이터베이스의 값으로 덮어쓰이지 않습니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>속성 이름을 가져옵니다. </summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>이 개체가 나타내는 탐색 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> 클래스의 새 인스턴스를 반환합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />를 반환합니다.</returns>
      <param name="entry">항목입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>데이터베이스에서 이 컬렉션을 로드하는 데 사용되는 쿼리를 반환합니다. 반환된 쿼리는 LINQ를 통해 수정하여 데이터베이스에서 필터링이나 작업을 수행할 수 있습니다. 예를 들어 데이터베이스에 있는 컬렉션의 엔터티를 실제로 로드하지 않고 그 수를 계산하는 작업을 수행할 수 있습니다. </summary>
      <returns>컬렉션에 대한 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>
        <see cref="T:System.Data.Objects.ObjectContext" />를 만드는 데 사용할 수 있거나 <see cref="T:System.Data.Entity.DbContext" />의 생성자에 전달할 수 있는 EDM(엔터티 데이터 모델) 모델의 변경할 수 없는 표현입니다.  성능 향상을 위해 이 형식의 인스턴스는 캐시되고 컨텍스트를 생성하기 위해 다시 사용되어야 합니다.  </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>ObjectContext에서 파생된 클래스 또는 <see cref="T:System.Data.Objects.ObjectContext" />의 인스턴스를 만듭니다. DbContext의 인스턴스는 적절한 DbContext 생성자를 사용하여 만들 수 있습니다. 파생된 ObjectContext를 사용하는 경우 파생된 ObjectContext에 단일 EntityConnection 매개 변수를 사용하는 public 생성자가 있어야 합니다. 전달된 연결은 만들어진 ObjectContext에서 사용되지만 컨텍스트에서 소유되지는 않습니다.  호출자는 컨텍스트가 삭제되면 연결을 삭제해야 합니다. </summary>
      <returns>컨텍스트를 반환합니다.</returns>
      <param name="existingConnection">컨텍스트에서 사용할 데이터베이스에 대한 기존 연결입니다.</param>
      <typeparam name="TContext">만들 컨텍스트의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 클래스의 제네릭이 아닌 버전입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 개체를 반환합니다. </summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TComplexProperty">복합 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>이 속성의 중첩 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>이 속성의 중첩 속성을 나타내는 개체를 가져옵니다. 이 메서드는 스칼라 속성이나 복합 속성에 사용할 수 있습니다. </summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />의 ComplexProperty 메서드에서 반환되고 복합 속성의 상태에 액세스할 수 있도록 허용합니다. </summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TComplexProperty">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>이 속성의 중첩 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="property">중첩 속성을 나타내는 식입니다.</param>
      <typeparam name="TNestedComplexProperty">중첩 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>이 속성의 중첩 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>이 속성의 중첩 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
      <typeparam name="TNestedComplexProperty">중첩 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>이 개체가 나타내는 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />를 반환합니다.</returns>
      <param name="entry">항목입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>이 속성의 중첩 속성을 나타내는 개체를 가져옵니다. 이 메서드는 스칼라 속성이나 복합 속성에 사용할 수 있습니다. </summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="property">중첩 속성을 나타내는 식입니다.</param>
      <typeparam name="TNestedProperty">중첩 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>이 속성의 중첩 속성을 나타내는 개체를 가져옵니다. 이 메서드는 스칼라 속성이나 복합 속성에 사용할 수 있습니다. </summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
      <typeparam name="TNestedProperty">중첩 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>이 속성의 중첩 속성을 나타내는 개체를 가져옵니다. 이 메서드는 스칼라 속성이나 복합 속성에 사용할 수 있습니다. </summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>데이터베이스 연결에 대한 정보를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>응용 프로그램 구성 파일에 지정된 연결을 나타내는 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 클래스의 새 인스턴스를 만듭니다.</summary>
      <param name="connectionName">응용 프로그램 구성에 있는 연결 문자열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>연결 문자열을 기반으로 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 클래스의 새 인스턴스를 만듭니다.</summary>
      <param name="connectionString">연결에 사용할 연결 문자열입니다.</param>
      <param name="providerInvariantName">연결에 사용할 공급자의 이름입니다. SQL Server의 경우 'System.Data.SqlClient'를 사용합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 나타냅니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 프로젝트와 연관된 데이터베이스 연결 문자열의 원본을 설명합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>연결 문자열은 규칙에 따라 만들어졌습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>연결 문자열은 외부 구성으로부터 읽혀졌습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>연결 문자열이 런타임에 명시적으로 지정되었습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>     연결 문자열이 DbContextInfo에 제공된 연결 정보로 재정의되었습니다.  </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />의 Configuration 메서드에 의해 반환되어 컨텍스트의 구성 옵션에 액세스할 수 있도록 합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>구성 변경의 자동 검색 기능이 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>구성 변경의 자동 검색 기능이 사용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>지정된 구성이 현재 구성과 같은지 여부를 반환합니다.</summary>
      <returns>지정된 구성이 현재 구성과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 구성입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>지정된 구성의 해시 함수를 반환합니다.</summary>
      <returns>지정된 구성의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>현재 구성의 형식을 가져옵니다.</summary>
      <returns>현재 구성의 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>탐색 속성으로 노출된 관계의 지연 로드가 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.  지연 로드는 기본적으로 사용됩니다. </summary>
      <returns>지연 로드가 사용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>프레임워크에서 엔터티 형식의 인스턴스를 만들 때마다 동적으로 생성된 프록시 클래스의 인스턴스를 만들지 여부를 나타내는 값을 가져오거나 설정합니다. 이 플래그를 통해 프록시 생성 기능이 사용되는 경우에도 프록시되기 위한 요구 사항을 충족하는 엔터티 형식에 대해서만 프록시 인스턴스가 만들어집니다. 프록시 생성 기능은 기본적으로 사용됩니다. </summary>
      <returns>프록시 생성 기능이 사용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>구성의 문자열 표현을 반환합니다.</summary>
      <returns>구성의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>
        <see cref="M:System.Data.Entity.DbContext.SaveChanges" />를 호출할 때 추적된 엔터티의 유효성을 자동으로 검사해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다. 기본값은 true입니다. </summary>
      <returns>추적된 엔터티의 유효성을 자동으로 검사해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식에 대한 런타임 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 초기화합니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 초기화합니다. 제공할 수 있고 연결 문자열 확인 중 사용되는 외부 구성 개체(예: app.config 또는 web.config)입니다. 여기에는 연결 문자열 및 DefaultConnectionFactory 항목 찾기가 포함됩니다. </summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="config">구성 파일을 나타내는 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>특정 데이터베이스를 대상으로 하는 지정된 <see cref="T:System.Data.Entity.DbContext" />를 나타내는 새 인스턴스를 초기화합니다.     제공할 수 있고 연결 문자열 확인 중 사용되는 외부 구성 개체(예: app.config 또는 web.config)입니다. 여기에는 연결 문자열 및 DefaultConnectionFactory 항목 찾기가 포함됩니다. </summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="config">구성 파일을 나타내는 개체입니다.</param>
      <param name="connectionInfo">사용할 데이터베이스에 대한 연결 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 초기화합니다. 연결 문자열의 외부 목록을 제공할 수 있고 연결 문자열 확인 중 외부 구성 파일에 지정된 연결 문자열 대신 이 연결 문자열의 외부 목록이 사용됩니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="connectionStringSettings">연결 문자열의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>특정 데이터베이스를 대상으로 하는 지정된 <see cref="T:System.Data.Entity.DbContext" />를 나타내는 새 인스턴스를 초기화합니다. </summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="connectionInfo">사용할 데이터베이스에 대한 연결 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 초기화합니다. 기본 EDM 모델을 생성할 때 사용되는 결정된 기본 공급자를 재정의하기 위해 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> 개체를 제공할 수 있습니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="modelProviderInfo">대상으로 지정할 기본 ADO.NET 공급자를 지정하는 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> 개체입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결의 ADO.NET 공급자 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 항목에 사용되는 연결의 ADO.NET 공급자 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열을 가져오거나 설정합니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열의 원본을 가져오거나 설정합니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열의 원본입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>구체적인 <see cref="T:System.Data.Entity.DbContext" /> 형식을 가져오거나 설정합니다.</summary>
      <returns>구체적인 <see cref="T:System.Data.Entity.DbContext" /> 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 만듭니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식의 인스턴스를 만들 수 있는 경우 새 인스턴스를 반환하고 그렇지 않으면 null을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식을 만들 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식을 만들 수 있으면 true이고 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>초기화된 파생 컨텍스트에 대한 모델을 가져오거나 설정합니다.</summary>
      <returns>초기화된 파생 컨텍스트에 대한 모델입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 클래스의 제네릭이 아닌 버전입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>이 개체가 나타내는 추적된 엔터티에 대한 지정된 제네릭 형식의 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 클래스에 대한 새 인스턴스를 반환합니다. 추적된 엔터티의 형식은 제네릭 형식과 호환되어야 합니다. 그렇지 않으면 예외가 throw됩니다. </summary>
      <returns>제네릭 버전입니다.</returns>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>이 엔터티에서 관련 엔터티 컬렉션으로의 컬렉션 탐색 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>이 엔터티의 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>복합 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">복합 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>이 개체가 나타내는 추적된 엔터티의 현재 속성 값을 가져옵니다. </summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>엔터티를 가져옵니다. </summary>
      <returns>엔터티입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />가 이 인스턴스와 같은지 여부를 확인합니다. 두 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스가 동일한 <see cref="T:System.Data.Entity.DbContext" />에서 동일한 엔터티의 항목인 경우 같은 것으로 간주됩니다. </summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />가 이 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="other">이 인스턴스와 비교할 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.Object" />가 이 인스턴스와 같은지 여부를 확인합니다. 두 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스가 동일한 <see cref="T:System.Data.Entity.DbContext" />에서 동일한 엔터티의 항목인 경우 같은 것으로 간주됩니다. </summary>
      <returns>지정된 개체가 이 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>데이터베이스에 현재 있는 추적된 엔터티 값의 복사본을 데이터베이스에서 쿼리합니다. 반환된 사전에서 값을 변경하면 데이터베이스에서 값이 업데이트되지 않습니다. 엔터티가 데이터베이스에 없으면 null이 반환됩니다. </summary>
      <returns>저장소 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다. </summary>
      <returns>해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하기 적합한 이 인스턴스의 해시 코드입니다.  </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>현재 데이터베이스 엔터티 항목의 형식을 가져옵니다.</summary>
      <returns>현재 데이터베이스 엔터티 항목의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>이 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스의 유효성을 검사하고 유효성 검사 결과를 반환합니다. </summary>
      <returns>엔터티 유효성 검사 결과입니다. <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 메서드가 재정의된 경우 null일 수 있습니다. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>엔터티의 멤버를 나타내는 개체를 가져옵니다.  반환된 개체의 런타임 형식은 요청된 멤버의 형식에 따라 다릅니다.  현재 지원되는 멤버 형식과 해당 반환 형식은 참조 탐색 속성(<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />), 컬렉션 탐색 속성(<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />), 기본/스칼라 속성(<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />) 및 복합 속성(<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />)입니다. </summary>
      <returns>멤버를 나타내는 개체입니다.</returns>
      <param name="propertyName">멤버의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>이 개체가 나타내는 추적된 엔터티의 원래 속성 값을 가져옵니다. 일반적으로 원래 값은 데이터베이스에서 마지막으로 쿼리되었을 때의 값인 엔터티의 속성 값입니다. </summary>
      <returns>원래 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>이 엔터티의 스칼라 또는 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>이 엔터티에서 다른 엔터티로의 참조(비컬렉션) 탐색 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>데이터베이스에서 엔터티를 다시 로드하여 속성 값을 데이터베이스의 값으로 덮어씁니다. 이 메서드를 호출한 후 엔터티는 변경되지 않은 상태가 됩니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>엔터티의 상태를 가져오거나 설정합니다. </summary>
      <returns>상태입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>데이터베이스 엔터티 항목의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스 엔터티 항목의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.DbContext" />에서 추적 중인 엔터티에 대한 정보에 액세스하고 엔터티를 제어할 수 있도록 합니다.  컨텍스트의 Entity 또는 Entities 메서드를 사용하여 이 형식의 개체를 가져올 수 있습니다. </summary>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>이 엔터티에서 관련 엔터티 컬렉션으로의 컬렉션 탐색 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성을 나타내는 식입니다.</param>
      <typeparam name="TElement">컬렉션에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>이 엔터티에서 관련 엔터티 컬렉션으로의 컬렉션 탐색 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
      <typeparam name="TElement">컬렉션에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>이 엔터티에서 관련 엔터티 컬렉션으로의 컬렉션 탐색 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티의 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>복합 속성을 나타내는 개체입니다.</returns>
      <param name="property">속성입니다.</param>
      <typeparam name="TComplexProperty">복합 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>이 엔터티의 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>복합 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">복합 속성의 이름입니다.</param>
      <typeparam name="TComplexProperty">복합 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>이 엔터티의 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>복합 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">복합 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>이 개체가 나타내는 추적된 엔터티의 현재 속성 값을 가져옵니다. </summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>엔터티를 가져옵니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />가 이 인스턴스와 같은지 여부를 확인합니다. 두 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 인스턴스가 동일한 <see cref="T:System.Data.Entity.DbContext" />에서 동일한 엔터티의 항목인 경우 같은 것으로 간주됩니다. </summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />가 이 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="other">이 인스턴스와 비교할 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.Object" />가 이 인스턴스와 같은지 여부를 확인합니다. 두 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 인스턴스가 동일한 <see cref="T:System.Data.Entity.DbContext" />에서 동일한 엔터티의 항목인 경우 같은 것으로 간주됩니다. </summary>
      <returns>지정된 개체가 이 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>데이터베이스에 현재 있는 추적된 엔터티 값의 복사본을 데이터베이스에서 쿼리합니다. 반환된 사전에서 값을 변경하면 데이터베이스에서 값이 업데이트되지 않습니다. 엔터티가 데이터베이스에 없으면 null이 반환됩니다. </summary>
      <returns>저장소 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하기 적합한 이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>현재 데이터베이스 엔터티의 형식을 가져옵니다.</summary>
      <returns>현재 데이터베이스 엔터티의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>이 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 인스턴스의 유효성을 검사하고 유효성 검사 결과를 반환합니다. </summary>
      <returns>엔터티 유효성 검사 결과입니다. <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 메서드가 재정의된 경우 null일 수 있습니다. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>엔터티의 멤버를 나타내는 개체를 가져옵니다.  반환된 개체의 런타임 형식은 요청된 멤버의 형식에 따라 다릅니다.  현재 지원되는 멤버 형식과 해당 반환 형식은 참조 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />, 컬렉션 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />, 기본/스칼라 속성 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> 및 복합 속성 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />입니다. </summary>
      <returns>엔터티의 멤버입니다. </returns>
      <param name="propertyName">멤버의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>엔터티의 멤버를 나타내는 개체를 가져옵니다.  반환된 개체의 런타임 형식은 요청된 멤버의 형식에 따라 다릅니다.  현재 지원되는 멤버 형식과 해당 반환 형식은 참조 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />, 컬렉션 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />, 기본/스칼라 속성 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 및 복합 속성 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />입니다. </summary>
      <returns>멤버를 나타내는 개체입니다.</returns>
      <param name="propertyName">멤버의 이름입니다.</param>
      <typeparam name="TMember">멤버의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>이 개체가 나타내는 추적된 엔터티에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 클래스의 새 인스턴스를 반환합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />를 반환합니다.</returns>
      <param name="entry">항목입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>이 개체가 나타내는 추적된 엔터티의 원래 속성 값을 가져옵니다. 일반적으로 원래 값은 데이터베이스에서 마지막으로 쿼리되었을 때의 값인 엔터티의 속성 값입니다. </summary>
      <returns>원래 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티의 스칼라 또는 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>속성을 나타내는 개체입니다.</returns>
      <param name="property">속성입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>이 엔터티의 스칼라 또는 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">속성의 이름입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>이 엔터티의 스칼라 또는 복합 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티에서 다른 엔터티로의 참조(비컬렉션) 탐색 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성을 나타내는 식입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>이 엔터티에서 다른 엔터티로의 참조(비컬렉션) 탐색 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>이 엔터티에서 다른 엔터티로의 참조(비컬렉션) 탐색 속성을 나타내는 개체를 가져옵니다. </summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>데이터베이스에서 엔터티를 다시 로드하여 속성 값을 데이터베이스의 값으로 덮어씁니다. 이 메서드를 호출한 후 엔터티는 변경되지 않은 상태가 됩니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>엔터티의 상태를 가져오거나 설정합니다. </summary>
      <returns>상태입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>데이터베이스 엔터티 값의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스 엔터티 값의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>엔터티의 탐색 속성이나 스칼라 또는 복합 속성을 나타내는 데 사용되는 추상 기본 클래스입니다.  스칼라 속성과 복합 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />를 사용하고, 참조 탐색 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />를 사용하며, 컬렉션 탐색 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />를 사용합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 개체를 반환합니다. </summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>이 속성의 현재 값을 가져오거나 설정합니다. </summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>이 멤버가 속한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다. </summary>
      <returns>이 멤버를 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>지정된 항목이 현재 쿼리와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 항목이 현재 항목과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 항목입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>지정된 항목의 해시 함수를 반환합니다.</summary>
      <returns>지정된 항목의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>현재 항목의 형식을 가져옵니다.</summary>
      <returns>현재 항목의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>이 속성의 유효성을 검사합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 개체의 컬렉션입니다. null일 수 없습니다. 엔터티가 유효하면 컬렉션은 비어 있습니다. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>속성 이름을 가져옵니다. </summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>데이터베이스 속성 값의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스 속성 값의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>엔터티의 탐색 속성이나 스칼라 또는 복합 속성을 나타내는 데 사용되는 추상 기본 클래스입니다.  스칼라 속성과 복합 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />를 사용하고, 참조 탐색 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />를 사용하며, 컬렉션 탐색 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />를 사용합니다. </summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>이 속성의 현재 값을 가져오거나 설정합니다. </summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>이 멤버가 속한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다. </summary>
      <returns>이 멤버를 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>지정된 쿼리가 현재 쿼리와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 쿼리가 현재 쿼리와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>지정된 쿼리의 해시 함수를 반환합니다.</summary>
      <returns>지정된 쿼리의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>현재 쿼리의 형식을 가져옵니다.</summary>
      <returns>현재 쿼리의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>이 속성의 유효성을 검사합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 개체의 컬렉션입니다. null일 수 없습니다. 엔터티가 유효하면 컬렉션은 비어 있습니다. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>데이터베이스 멤버 항목의 이름을 가져옵니다.</summary>
      <returns>데이터베이스 멤버 항목의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>이 개체가 나타내는 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 클래스의 새 인스턴스를 반환합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />를 반환합니다.</returns>
      <param name="entry">항목입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>데이터베이스 속성 값의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스 속성 값의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />가 만든 EDM(엔터티 데이터 모델)을 나타냅니다. <see cref="M:System.Data.Entity.Infrastructure.DbModel.Compile" /> 메서드를 사용하여 EDM 표현에서 <see cref="T:System.Data.Entity.DbContext" /> 또는 <see cref="T:System.Data.Objects.ObjectContext" /> 인스턴스를 캐시하고 만드는 데 적합한 모델의 컴파일된 스냅숏인 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />로 변환할 수 있습니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 인스턴스를 캐시하고 만드는 데 적합한 컴파일된 스냅숏인 이 모델의 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />을 만듭니다. </summary>
      <returns>컴파일된 모델입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 클래스의 제네릭이 아닌 버전입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 개체를 반환합니다. </summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>이 속성의 현재 값을 가져오거나 설정합니다. </summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>이 속성이 속한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다. </summary>
      <returns>이 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>이 속성의 값이 데이터베이스에서 로드된 이후 수정되었는지 여부를 나타내는 값을 가져오거나 설정합니다. </summary>
      <returns>이 인스턴스가 수정되었으면 true이고, 그렇지 않으면 false입니다. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>속성 이름을 가져옵니다. </summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>이 속성의 원래 값을 가져오거나 설정합니다. </summary>
      <returns>원래 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>중첩 속성에 대한 부모 속성의 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />입니다. 이 메서드는 복합 개체의 속성에 대해서만 null이 아닌 항목을 반환하고, 엔터티 자체의 속성에 대해서는 null을 반환합니다. </summary>
      <returns>부모 복합 속성의 항목이거나, 엔터티 속성인 경우 null입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />의 Property 메서드에서 반환되고 스칼라 또는 복합 속성의 상태에 액세스할 수 있도록 허용합니다. </summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>이 속성의 현재 값을 가져오거나 설정합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>이 속성이 속한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다. </summary>
      <returns>이 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>이 속성의 값이 데이터베이스에서 로드된 이후 수정되었는지 여부를 나타내는 값을 가져오거나 설정합니다. </summary>
      <returns>이 인스턴스가 수정되었으면 true이고, 그렇지 않으면 false입니다. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>속성 이름을 가져옵니다. </summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>이 개체가 나타내는 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> 클래스의 새 인스턴스를 반환합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />를 반환합니다.</returns>
      <param name="entry">항목입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>이 속성의 원래 값을 가져오거나 설정합니다. </summary>
      <returns>
        <see cref="T:System.String" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>중첩 속성에 대한 부모 속성의 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />입니다. 이 메서드는 복합 개체의 속성에 대해서만 null이 아닌 항목을 반환하고, 엔터티 자체의 속성에 대해서는 null을 반환합니다. </summary>
      <returns>부모 복합 속성의 항목이거나, 엔터티 속성인 경우 null입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>기본 엔터티 또는 복합 개체에 대한 모든 속성의 컬렉션입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>이 사전의 모든 속성 복사본이 포함된 새 사전을 만듭니다. 새 사전을 변경해도 이 사전에 반영되지 않으며 그 반대의 경우에도 마찬가지입니다. </summary>
      <returns>이 사전의 복제본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>지정된 값이 현재 값과 같은지 여부를 반환합니다.</summary>
      <returns>지정된 값이 현재 값과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>지정된 값의 해시 함수를 반환합니다.</summary>
      <returns>지정된 값의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>현재 값의 형식을 가져옵니다.</summary>
      <returns>현재 값의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>인덱싱된 속성 getter를 사용하는 것처럼, 제네릭 매개 변수의 형식으로 형식화된 속성의 값을 가져옵니다.  이는 중첩 사전에서 캐스트가 많은 식을 작성하지 않으려는 경우 특히 유용합니다. </summary>
      <returns>
        <see cref="T:System.Type" />을 반환합니다. <paramref name="propertyName" />으로 지정된 속성의 값입니다.</returns>
      <param name="propertyName">속성 이름입니다.</param>
      <typeparam name="TValue">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>지정된 속성 이름을 가진 속성의 값을 가져오거나 설정합니다. 속성 값은 이 클래스의 중첩 인스턴스일 수 있습니다. </summary>
      <returns>속성 값입니다.</returns>
      <param name="propertyName">검색할 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>이 사전의 모든 속성 이름의 집합을 읽기 전용 집합으로 가져옵니다. </summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>다른 사전에서 값을 읽어 이 사전의 값을 설정합니다. 다른 사전은 이 사전과 동일한 형식이나 이 사전의 형식에서 파생된 형식을 기반으로 해야 합니다. </summary>
      <param name="propertyValues">값을 읽을 사전입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>지정된 개체에서 값을 읽어 이 사전의 값을 설정합니다. 지정된 개체는 임의의 형식일 수 있습니다.  사전의 속성 이름과 일치하는 이름을 가진 개체의 속성 중에서 읽을 수 있는 모든 속성을 읽게 됩니다.  다른 속성은 무시됩니다.  이에 따라 간단한 DTO(Data Transfer Object)에서 속성을 복사할 수 있습니다. </summary>
      <param name="obj">값을 읽을 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>이 사전에 대한 기본 형식의 개체를 만들고 이 사전의 속성 값을 사용하여 변환합니다. </summary>
      <returns>새 개체로 복사된 이 사전의 속성입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>데이터베이스 속성 값의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스 속성 값의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>데이터베이스 공급자에 대한 정보를 저장합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerInvariantName">사용해야 하는 SQL Server Compact Edition의 버전을 지정하는 공급자 고정 이름입니다.</param>
      <param name="providerManifestToken">Schema 요소의 공급자에 대한 매니페스트 토큰 정보입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>사용해야 하는 SQL Server Compact Edition의 버전을 지정하는 공급자 고정 이름을 가져옵니다.</summary>
      <returns>데이터베이스 공급자의 데이터 공급자입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Schema 요소의 공급자에 대한 매니페스트 토큰 정보를 가져옵니다.</summary>
      <returns>매니페스트 토큰입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에 대한 제네릭이 아닌 LINQ to Entities 쿼리를 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" />에서 캐시되지 않을 새 쿼리를 반환합니다. </summary>
      <returns>NoTracking이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 개체를 반환합니다. </summary>
      <returns>제네릭 집합 개체입니다.</returns>
      <typeparam name="TElement">쿼리가 만들어진 요소의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>IQueryable 요소 형식입니다. </summary>
      <returns>요소 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>지정된 쿼리가 현재 쿼리와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 쿼리가 현재 쿼리와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>지정된 쿼리의 해시 함수를 반환합니다.</summary>
      <returns>지정된 쿼리의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>현재 쿼리의 형식을 가져옵니다.</summary>
      <returns>현재 쿼리의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에 대한 포함된 제네릭이 아닌 LINQ to Entities 쿼리를 반환합니다.</summary>
      <returns>포함된 LINQ 쿼리입니다.</returns>
      <param name="path">포함된 LINQ의 경로입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>저장소에 대해 실행되도록 이 쿼리의 열거형을 가져옵니다.</summary>
      <returns>쿼리에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false를 반환합니다.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>저장소 쿼리에 대한 직접 바인딩이 지원되지 않음을 나타내는 예외를 throw합니다. </summary>
      <returns>반환하지 않고 항상 예외를 throw합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 식입니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>IQueryable 공급자입니다.</summary>
      <returns>
        <see cref="T:System.Linq.IQueryProvider" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>기본 쿼리의 <see cref="T:System.String" /> 표현을 반환합니다. </summary>
      <returns>쿼리 문자열입니다. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에 대한 LINQ to Entities 쿼리를 나타냅니다. </summary>
      <typeparam name="TResult">쿼리할 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" />에서 캐시되지 않을 새 쿼리를 반환합니다. </summary>
      <returns>NoTracking이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>지정된 쿼리가 현재 쿼리와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 쿼리가 현재 쿼리와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>지정된 쿼리의 해시 함수를 반환합니다.</summary>
      <returns>지정된 쿼리의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>현재 쿼리의 형식을 가져옵니다.</summary>
      <returns>현재 쿼리의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에 대한 포함된 LINQ to Entities 쿼리를 반환합니다.</summary>
      <returns>포함된 LINQ입니다.</returns>
      <param name="path">포함된 LINQ의 경로입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>이 쿼리에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> 클래스의 새 인스턴스를 반환합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />를 반환합니다.</returns>
      <param name="entry">항목입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>저장소에 대해 실행되도록 이 쿼리의 열거형을 가져옵니다.</summary>
      <returns>쿼리에 대한 <see cref="T:System.Collections.Generic.IEnumerator`1" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>저장소에 대해 실행되도록 이 쿼리의 열거형을 가져옵니다.</summary>
      <returns>쿼리에 대한 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false를 반환합니다.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>저장소 쿼리에 대한 직접 바인딩이 지원되지 않음을 나타내는 예외를 throw합니다. </summary>
      <returns>반환하지 않고 항상 예외를 throw합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>IQueryable 요소 형식입니다.</summary>
      <returns>
        <see cref="T:System.Type" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 식입니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>IQueryable 공급자입니다.</summary>
      <returns>
        <see cref="T:System.Linq.IQueryProvider" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>기본 쿼리의 <see cref="T:System.String" /> 표현을 반환합니다. </summary>
      <returns>쿼리 문자열입니다. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 클래스의 제네릭이 아닌 버전입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 개체를 반환합니다. </summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>탐색 속성의 현재 값을 가져오거나 설정합니다.  현재 값은 탐색 속성이 참조하는 엔터티입니다. </summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>이 탐색 속성이 속하는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다. </summary>
      <returns>이 탐색 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>엔터티가 데이터베이스에서 로드되었는지 여부를 나타내는 값을 가져옵니다. </summary>
      <returns>엔터티가 로드되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>데이터베이스에서 엔터티를 로드합니다. 엔터티가 컨텍스트에 이미 있으면 데이터베이스의 값으로 덮어쓰이지 않습니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>속성 이름을 가져옵니다. </summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>데이터베이스에서 이 엔터티를 로드하는 데 사용되는 쿼리를 반환합니다. 반환된 쿼리는 LINQ를 통해 수정하여 데이터베이스에서 필터링이나 작업을 수행할 수 있습니다. </summary>
      <returns>엔터티에 대한 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />의 Reference 메서드에서 반환되고 엔터티의 참조 탐색 속성에 대해 수행할 로드와 같은 작업을 허용합니다. </summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>탐색 속성의 현재 값을 가져오거나 설정합니다.  현재 값은 탐색 속성이 참조하는 엔터티입니다. </summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>이 탐색 속성이 속하는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다. </summary>
      <returns>이 탐색 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>엔터티가 데이터베이스에서 로드되었는지 여부를 나타내는 값을 가져옵니다. </summary>
      <returns>엔터티가 로드되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>데이터베이스에서 엔터티를 로드합니다. 엔터티가 컨텍스트에 이미 있으면 데이터베이스의 값으로 덮어쓰이지 않습니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>속성 이름을 가져옵니다. </summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary> 이 개체가 나타내는 탐색 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> 클래스의 새 인스턴스를 반환합니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />를 반환합니다.</returns>
      <param name="entry">항목입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>데이터베이스에서 이 엔터티를 로드하는 데 사용되는 쿼리를 반환합니다. 반환된 쿼리는 LINQ를 통해 수정하여 데이터베이스에서 필터링이나 작업을 수행할 수 있습니다. </summary>
      <returns>엔터티에 대한 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 만들어지고 해당 컨텍스트의 연결을 사용하여 실행되는 엔터티에 대한 SQL 쿼리를 나타냅니다. 이 클래스의 인스턴스는 엔터티 형식에 대한 <see cref="T:System.Data.Entity.DbSet" />에서 가져옵니다. 쿼리는 이 개체가 만들어질 때 실행되지 않고 foreach 등을 사용하여 이 개체가 열거될 때마다 실행됩니다. 비엔터티에 대한 SQL 쿼리는 <see cref="P:System.Data.Entity.DbContext.Database" />를 사용하여 만들어집니다. 이 클래스의 제네릭 버전은 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>쿼리의 결과가 연결된 <see cref="T:System.Data.Entity.DbContext" />에서 추적되지 않을 새 쿼리를 반환합니다. </summary>
      <returns>추적 안 함이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>지정된 쿼리가 현재 쿼리와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 쿼리가 현재 쿼리와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 쿼리입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
      <summary>쿼리를 실행하고 요소에 대한 열거자를 반환합니다. </summary>
      <returns>요소를 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>지정된 쿼리의 해시 함수를 반환합니다.</summary>
      <returns>지정된 쿼리의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>현재 쿼리의 형식을 가져옵니다.</summary>
      <returns>현재 쿼리의 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false를 반환합니다.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>저장소 쿼리에 대한 직접 바인딩이 지원되지 않음을 나타내는 예외를 발생시킵니다.</summary>
      <returns>반환하지 않고 항상 예외를 throw합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>쿼리가 만들어졌을 때 설정된 SQL 문자열을 포함하는 <see cref="T:System.String" />을 반환합니다.  매개 변수는 포함되지 않습니다. </summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 만들어지고 해당 컨텍스트의 연결을 사용하여 실행되는 엔터티에 대한 SQL 쿼리를 나타냅니다. 이 클래스의 인스턴스는 엔터티 형식에 대한 <see cref="T:System.Data.Entity.DbSet`1" />에서 가져옵니다. 쿼리는 이 개체가 만들어질 때 실행되지 않고 foreach 등을 사용하여 이 개체가 열거될 때마다 실행됩니다. 비엔터티에 대한 SQL 쿼리는 <see cref="P:System.Data.Entity.DbContext.Database" />를 사용하여 만들어집니다. 이 클래스의 제네릭이 아닌 버전은 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />를 참조하십시오. </summary>
      <typeparam name="TEntity">엔터티입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>쿼리의 결과가 연결된 <see cref="T:System.Data.Entity.DbContext" />에서 추적되지 않을 새 쿼리를 반환합니다. </summary>
      <returns>추적 안 함이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>지정된 쿼리가 현재 쿼리와 같은지 여부를 반환합니다.</summary>
      <returns>지정된 쿼리가 현재 쿼리와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
      <summary>쿼리를 실행하고 요소에 대한 열거자를 반환합니다. </summary>
      <returns>요소에 대한 열거자입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>지정된 쿼리의 해시 함수를 반환합니다.</summary>
      <returns>지정된 쿼리의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>현재 쿼리의 형식을 가져옵니다.</summary>
      <returns>현재 쿼리의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>쿼리를 실행하고 요소에 대한 열거자를 반환합니다.</summary>
      <returns>요소를 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false를 반환합니다.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>저장소 쿼리에 대한 직접 바인딩이 지원되지 않음을 나타내는 예외를 throw합니다.</summary>
      <returns>반환하지 않고 항상 예외를 throw합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>쿼리가 만들어졌을 때 설정된 SQL 문자열을 포함하는 <see cref="T:System.String" />을 반환합니다.  매개 변수는 포함되지 않습니다. </summary>
      <returns> 이 인스턴스를 나타내는 <see cref="T:System.String" />입니다. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>엔터티에 대한 SaveChanges로 인해 데이터베이스 업데이트가 발생할 것으로 예상되었지만 실제로는 영향을 받은 데이터베이스의 행이 없을 때 <see cref="T:System.Data.Entity.DbContext" />에 의해 throw되는 예외입니다.  이는 일반적으로 데이터베이스가 동시에 업데이트되었고 일치할 것으로 예상된 동시성 토큰이 실제로는 일치하지 않았음을 나타냅니다. 이 예외에 의해 참조되는 상태 항목은 보안 때문에 serialize되지 않으며 serialization 후 상태 항목에 대한 액세스는 null을 반환합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>데이터베이스 업데이트 중에 발생한 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>데이터베이스에 저장할 수 없는 엔터티를 나타내는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 개체를 가져옵니다. </summary>
      <returns>데이터베이스에 저장할 수 없는 엔터티입니다. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>EDM에 대한 메타데이터를 데이터베이스에 저장하는 데 사용되는 엔터티를 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>현재 항상 1인 메타데이터 엔터티의 식별자를 가져오거나 설정합니다. </summary>
      <returns>식별자입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>데이터베이스가 모델에서 만들어진 후 모델이 변경되었는지 여부를 확인하는 데 사용되는 모델 해시를 가져오거나 설정합니다. </summary>
      <returns>모델 해시입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>지정된 컨텍스트에 대해 Code First에서 계산된 모델 해시를 가져오려고 시도합니다. 컨텍스트가 Code First 모드에서 사용되지 않는 경우 이 메서드는 null을 반환합니다. </summary>
      <returns>해시 문자열입니다.</returns>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Code First에서 EDMX 형식으로 만들어진 엔터티 데이터 모델에 액세스하는 데 사용되는 메서드를 포함합니다. 일반적으로 이러한 메서드는 Code First에서 내부적으로 만드는 모델을 조회해야 하는 경우 디버깅에 사용됩니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>지정된 컨텍스트에서 Code First를 사용하고 결과 엔터티 데이터 모델을 지정된 기록기에 EDMX 형식으로 기록합니다.  이 메서드는 Code First를 사용하고 내부적으로 모델을 만드는 컨텍스트 인스턴스에서만 사용할 수 있습니다.  Database First 또는 Model First를 사용하여 만들어진 컨텍스트, 기존의 <see cref="T:System.Data.Objects.ObjectContext" />를 사용하여 만들어진 컨텍스트 또는 기존의 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />을 사용하여 만들어진 컨텍스트에는 이 메서드를 사용할 수 없습니다. </summary>
      <param name="context">컨텍스트입니다.</param>
      <param name="writer">기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />이 나타내는 엔터티 데이터 모델을 지정된 기록기에 EDMX 형식으로 기록합니다. </summary>
      <param name="model">EDM을 나타내는 개체입니다.</param>
      <param name="writer">기록기입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>이 인터페이스의 구현은 지정된 데이터베이스 이름을 기반으로 데이터베이스 서버의 형식에 대한 DbConnection 개체를 만드는 데 사용됩니다.   인스턴스가 <see cref="T:System.Data.Entity.Database" /> 클래스에 대해 설정되어 모든 <see cref="T:System.Data.Entity.DbContext" /> 개체가 연결 정보 없이 만들어지거나 기본적으로 특정 형식의 데이터베이스 서버를 사용하기 위한 데이터베이스 이름 또는 연결 문자열만 사용하여 만들어지도록 합니다. 이 인터페이스의 두 가지 구현이 제공됩니다. 그 중 하나는 Express Edition을 비롯한 Microsoft SQL Server에 대한 연결을 만드는 데 사용되는 <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" />이고, 다른 하나는 Microsoft SQL Server Compact Edition에 대한 연결을 만드는 데 사용되는 <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" />입니다. 필요에 따라 다른 데이터베이스 서버에 대한 다른 구현을 추가할 수 있습니다. 구현은 여러 스레드에서 동시에 액세스할 수 있으므로 스레드로부터 안전하거나 변경할 수 없어야 합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 연결을 만듭니다. </summary>
      <returns>초기화된 DbConnection입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>파생된 <see cref="T:System.Data.Entity.DbContext" /> 인스턴스를 만들기 위한 팩터리입니다. 공용 기본 생성자가 없는 컨텍스트 형식에 대한 디자인 타임 서비스 및 인스턴스화를 사용하도록 설정하려면 이 인터페이스를 구현합니다. 모델 렌더링 및 DDL 생성과 같은 특정 디자인 타임 환경을 사용하도록 설정하기 위해 디자인 타임에 파생된 <see cref="T:System.Data.Entity.DbContext" /> 인스턴스를 생성할 수 있습니다. 디자인 타임 서비스는 또한 파생된 <see cref="T:System.Data.Entity.DbContext" /> 형식과 동일한 어셈블리에 있는 이 인터페이스의 구현을 자동으로 검색할 수 있습니다.</summary>
      <typeparam name="TContext">이 유형 매개 변수는 공변(covariant)입니다. 즉, 지정한 유형 또는 보다 많이 파생된 모든 유형을 사용할 수 있습니다. 공변(covariance) 및 반공변(contravariance)에 대한 자세한 내용은 을(를) 참조하십시오.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>파생된 <see cref="T:System.Data.Entity.DbContext" /> 형식의 새 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="TContext" />의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>이 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙은 <see cref="T:System.Data.Entity.DbModelBuilder" />가 모델을 빌드할 때 모델에 대한 메타데이터를 포함하도록 합니다. <see cref="T:System.Data.Entity.DbContext" />에서 규칙에 따라 모델을 만드는 경우 <see cref="T:System.Data.Entity.DbModelBuilder" />가 사용하는 규칙 목록에 이 규칙을 추가합니다.  이에 따라 <see cref="T:System.Data.Entity.DbContext" />가 데이터베이스를 만드는 데 사용되는 경우 모델 메타데이터가 데이터베이스에 기록됩니다. 이 메타데이터를 사용하여 모델이 마지막으로 데이터베이스에 대해 사용된 이후 모델이 변경되었는지 여부를 확인할 수 있습니다.  이 규칙은 <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" /> 메서드를 재정의하여 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙의 목록에서 제거할 수 있습니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>
        <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> 인스턴스를 제공할 수 있는 개체에서 구현되는 인터페이스입니다. <see cref="T:System.Data.Entity.DbContext" /> 클래스는 기본 ObjectContext에 액세스할 수 있도록 하기 위해 이 인터페이스를 구현합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>개체 컨텍스트를 가져옵니다. </summary>
      <returns>개체 컨텍스트입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>     이 클래스의 인스턴스는 지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server LocalDb의 DbConnection 개체를 만드는 데 사용됩니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>     지정된 LocalDb 버전에 대해 연결 팩터리의 새 인스턴스를 만듭니다.     SQL Server 2012 LocalDb의 경우 "v11.0"을 사용합니다. </summary>
      <param name="localDbVersion">사용할 LocalDb 버전입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>     지정된 LocalDb 버전에 대해 연결 팩터리의 새 인스턴스를 만듭니다.     SQL Server 2012 LocalDb의 경우 "v11.0"을 사용합니다.      </summary>
      <param name="localDbVersion">사용할 LocalDb 버전입니다.</param>
      <param name="baseConnectionString">     'Initial Catalog', 'Data Source' 및 'AttachDbFilename' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다.     'Initial Catalog' 및 'AttachDbFilename'은 CreateConnection을 호출할 때 데이터베이스를 기반으로 이 문자열 앞에 표시됩니다.     'Data Source'는 LocalDbVersion 인수를 기반으로 설정됩니다. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>     'Initial Catalog', 'Data Source' 및 'AttachDbFilename' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다.     'Initial Catalog' 및 'AttachDbFilename'은 CreateConnection을 호출할 때 데이터베이스를 기반으로 이 문자열 앞에 표시됩니다.     'Data Source'는 LocalDbVersion 인수를 기반으로 설정됩니다.     기본값은 'Integrated Security=True; MultipleActiveResultSets=True;'입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>     지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server LocalDb의 연결을 만듭니다.     지정된 문자열에 '=' 문자가 포함되어 있으면 전체 연결 문자열로 취급되고, 그렇지 않으면 데이터베이스 이름으로만 취급됩니다. </summary>
      <returns>초기화된 DbConnection입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>이 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙에서는 파생 클래스 <see cref="T:System.Data.Entity.DbContext" />의 이름을 Code First에서 빌드된 개념적 모델의 컨테이너로 사용합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>이 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙에서는 파생 클래스 <see cref="T:System.Data.Entity.DbContext" />의 네임스페이스를 Code First에서 빌드된 개념적 모델의 네임스페이스로 사용합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 및 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />에 대한 참조를 바꾸기 위해 식 트리에 삽입되는 상수 식을 만드는 데 내부적으로 사용됩니다. </summary>
      <typeparam name="TElement">요소의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>LINQ 식 트리에서 예상되는 public 속성입니다.</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectQuery`1" />를 반환합니다. 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>이 클래스의 인스턴스는 지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server Compact Edition의 DbConnection 개체를 만드는 데 사용됩니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary> 비어 있는(기본) <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> 및 <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> 속성을 사용하여 새 연결 팩터리를 만듭니다. </summary>
      <param name="providerInvariantName">사용해야 하는 SQL Server Compact Edition의 버전을 지정하는 공급자 고정 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>지정된 <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> 및 <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> 속성을 사용하여 새 연결 팩터리를 만듭니다. </summary>
      <param name="providerInvariantName">사용해야 하는 SQL Server Compact Edition의 버전을 지정하는 공급자 고정 이름입니다. </param>
      <param name="databaseDirectory">SQL Server Compact Edition에서 데이터베이스 파일을 만들거나 읽을 때 사용하는 파일 이름을 형성하기 위해 데이터베이스 이름 앞에 추가할 경로입니다. 빈 문자열을 사용하면 SQL Server Compact Edition에서 데이터베이스 파일 위치로 기본 위치를 사용하게 됩니다. </param>
      <param name="baseConnectionString">'Data Source' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다. CreateConnection이 호출될 때 데이터베이스 이름을 기반으로 Data Source가 이 문자열 앞에 추가됩니다. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>'Data Source' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다. CreateConnection이 호출될 때 데이터베이스 이름을 기반으로 Data Source가 이 문자열 앞에 추가됩니다. 기본값은 빈 문자열로, 다른 옵션이 사용되지 않음을 의미합니다. </summary>
      <returns>사용된 연결 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server Compact Edition의 연결을 만듭니다. 지정된 문자열에 '=' 문자가 포함되어 있으면 전체 연결 문자열로 취급되고, 그렇지 않으면 데이터베이스 이름으로만 취급됩니다. </summary>
      <returns>초기화된 DbConnection입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>SQL Server Compact Edition에서 데이터베이스 파일을 만들거나 읽을 때 사용하는 파일 이름을 형성하기 위해 데이터베이스 이름 앞에 추가할 경로입니다. 기본값은 "|DataDirectory|"로, 파일이 지정된 데이터 디렉터리에 배치됨을 의미합니다. </summary>
      <returns>데이터베이스의 경로입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>사용해야 하는 SQL Server Compact Edition의 버전을 지정하는 공급자 고정 이름입니다. </summary>
      <returns>공급자 고정 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary> 이 클래스의 인스턴스는 지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server의 DbConnection 개체를 만드는 데 사용됩니다. 기본적으로 '.\SQLEXPRESS'에 대한 연결이 만들어집니다.  이를 변경하려면 팩터리 인스턴스를 생성할 때 기본 연결 문자열을 변경하면 됩니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'라는 기본 BaseConnectionString 속성을 사용하여 새 연결 팩터리를 만듭니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>지정된 BaseConnectionString 속성을 사용하여 새 연결 팩터리를 만듭니다. </summary>
      <param name="baseConnectionString">'Initial Catalog' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다. CreateConnection이 호출될 때 데이터베이스 이름을 기반으로 'Initial Catalog'가 이 문자열 앞에 추가됩니다. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>'Initial Catalog' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다. CreateConnection이 호출될 때 데이터베이스 이름을 기반으로 'Initial Catalog'가 이 문자열 앞에 추가됩니다. 기본값은 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'입니다. </summary>
      <returns>연결 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server의 연결을 만듭니다. 지정된 문자열에 '=' 문자가 포함되어 있으면 전체 연결 문자열로 취급되고, 그렇지 않으면 데이터베이스 이름으로만 취급됩니다. </summary>
      <returns>초기화된 DbConnection입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>이 특성은 전체 파생 클래스 <see cref="T:System.Data.Entity.DbContext" /> 또는 이 클래스의 개별 <see cref="T:System.Data.Entity.DbSet`1" /> 또는 <see cref="T:System.Data.Entity.IDbSet`1" /> 속성에 적용될 수 있습니다.  적용될 때 검색된 모든 <see cref="T:System.Data.Entity.DbSet`1" /> 또는 <see cref="T:System.Data.Entity.IDbSet`1" /> 속성이 모델에 포함되지만 자동으로 초기화되지는 않습니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>컨텍스트가 Database First 또는 Model First 모드에서 <see cref="T:System.Data.Entity.DbContext" /> 템플릿을 통해 생성되고 Code First 모드에서 사용되는 경우 throw되는 예외입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>코드 기반 마이그레이션의 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     기존 테이블에 열을 추가하는 작업을 추가합니다. </summary>
      <param name="table">     열을 추가할 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="name">     추가할 열의 이름입니다. </param>
      <param name="columnAction">     추가할 열을 지정하는 작업입니다. 예: c =&amp;gt; c.Int(nullable: false, defaultValue: 3).</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     새 외래 키 제약 조건을 만드는 작업을 추가합니다. </summary>
      <param name="dependentTable">     외래 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="dependentColumn">외래 키 열입니다.</param>
      <param name="principalTable">     이 외래 키가 참조하는 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="principalColumn">     이 외래 키가 참조하는 열입니다.      값을 제공하지 않으면 주 테이블의 기본 키가 참조됩니다. </param>
      <param name="cascadeDelete">     외래 키 관계에 대해 하위 삭제를 구성해야 하는지를 나타내는 값입니다.     값을 제공하지 않으면 하위 삭제가 해제됩니다. </param>
      <param name="name">     데이터베이스에 있는 외래 키 제약 조건의 이름입니다.     값을 제공하지 않으면 고유한 이름이 생성됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     새 외래 키 제약 조건을 만드는 작업을 추가합니다. </summary>
      <param name="dependentTable">     외래 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="dependentColumns">외래 키 열입니다.</param>
      <param name="principalTable">     이 외래 키가 참조하는 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="principalColumns">     이 외래 키가 참조하는 열입니다.      값을 제공하지 않으면 주 테이블의 기본 키가 참조됩니다. </param>
      <param name="cascadeDelete">     외래 키 관계에 대해 하위 삭제를 구성해야 하는지를 나타내는 값입니다.     값을 제공하지 않으면 하위 삭제가 해제됩니다. </param>
      <param name="name">     데이터베이스에 있는 외래 키 제약 조건의 이름입니다.     값을 제공하지 않으면 고유한 이름이 생성됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
      <summary>     새 기본 키를 만드는 작업을 추가합니다. </summary>
      <param name="table">     기본 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="column">기본 키 열입니다.</param>
      <param name="name">     데이터베이스에 있는 기본 키의 이름입니다.     값을 제공하지 않으면 고유한 이름이 생성됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
      <summary>     여러 열을 기반으로 새 기본 키를 만드는 작업을 추가합니다. </summary>
      <param name="table">     기본 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="columns">기본 키 열입니다.</param>
      <param name="name">     데이터베이스에 있는 기본 키의 이름입니다.     값을 제공하지 않으면 고유한 이름이 생성됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     기존 열의 정의를 변경하는 작업을 추가합니다. </summary>
      <param name="table">     열이 존재하는 테이블의 이름입니다. 스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="name">변경할 열의 이름입니다.</param>
      <param name="columnAction">     열에 대해 새 정의를 지정하는 작업입니다. 예: c =&amp;gt; c.String(nullable: false, defaultValue: "none").</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     단일 열에 인덱스를 만드는 작업을 추가합니다. </summary>
      <param name="table">     인덱스를 만들 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="column">인덱스를 만들 열의 이름입니다.</param>
      <param name="unique">     고유한 인덱스인지를 나타내는 값입니다.     값을 제공하지 않으면 고유하지 않은 인덱스가 만들어집니다. </param>
      <param name="name">     데이터베이스에서 인덱스에 사용할 이름입니다.     값을 제공하지 않으면 고유한 이름이 생성됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     여러 열에 인덱스를 만드는 작업을 추가합니다. </summary>
      <param name="table">     인덱스를 만들 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="columns">인덱스를 만들 열의 이름입니다.</param>
      <param name="unique">     고유한 인덱스인지를 나타내는 값입니다.     값을 제공하지 않으면 고유하지 않은 인덱스가 만들어집니다. </param>
      <param name="name">     데이터베이스에서 인덱스에 사용할 이름입니다.     값을 제공하지 않으면 고유한 이름이 생성됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>     새 테이블을 만드는 작업을 추가합니다. </summary>
      <returns>테이블 만들기 작업의 추가 구성을 허용하는 개체입니다.</returns>
      <param name="name">테이블의 이름입니다. 스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="columnsAction">     테이블에 포함할 열을 지정하는 작업입니다. 예: t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
      <typeparam name="TColumns">     이 테이블 만들기 작업의 열입니다.      이 형식은 지정할 필요가 없으며 사용자가 제공하는 columnsAction 매개 변수에서 유추됩니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>     다운그레이드 프로세스 중 수행할 작업입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>     기존 열을 삭제하는 작업을 추가합니다. </summary>
      <param name="table">     열을 삭제할 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="name">삭제할 열의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>     해당 이름을 기반으로 외래 키 제약 조건을 삭제하는 작업을 추가합니다. </summary>
      <param name="dependentTable">     외래 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="name">데이터베이스에 있는 외래 키 제약 조건의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>     외래 키 제약 조건이 대상으로 하는 열을 기반으로 외래 키 제약 조건을 삭제하는 작업을 추가합니다. </summary>
      <param name="dependentTable">     외래 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="dependentColumn">외래 키 열입니다.</param>
      <param name="principalTable">     이 외래 키가 참조하는 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="principalColumn">이 외래 키가 참조하는 열입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>     외래 키 제약 조건이 대상으로 하는 열을 기반으로 외래 키 제약 조건을 삭제하는 작업을 추가합니다. </summary>
      <param name="dependentTable">     외래 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="dependentColumns">외래 키 열입니다.</param>
      <param name="principalTable">     이 외래 키가 참조하는 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>     해당 이름을 기반으로 인덱스를 삭제하는 작업을 추가합니다. </summary>
      <param name="table">     인덱스를 삭제할 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="name">삭제할 인덱스의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>     인덱스가 대상으로 하는 열을 기반으로 인덱스를 삭제하는 작업을 추가합니다. </summary>
      <param name="table">     인덱스를 삭제할 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="columns">인덱스가 대상으로 하는 열의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>     기본 이름으로 만들어진 기존 기본 키를 삭제하는 작업을 추가합니다. </summary>
      <param name="table">     기본 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>     기본 이름이 없는 기존 기본 키를 삭제하는 작업을 추가합니다. </summary>
      <param name="table">     기본 키 열이 포함된 테이블입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="name">삭제할 기본 키의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>     테이블을 삭제하는 작업을 추가합니다. </summary>
      <param name="name">     삭제할 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 개체와 동일한지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>매개 변수 또는 열의 데이터를 지정된 형식으로 가져옵니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>현재 인스턴스의 런타임 형식을 반환합니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식을 나타내는 형식 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>현재 개체의 단순 복사본을 만듭니다.</summary>
      <returns>현재 개체의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>     테이블을 새 스키마로 이동하는 작업을 추가합니다. </summary>
      <param name="name">     이동할 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="newSchema">테이블을 이동할 대상 스키마입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>     열 이름을 바꾸는 작업을 추가합니다. </summary>
      <param name="table">     이름을 바꿀 열이 포함된 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="name">이름을 바꿀 열의 이름입니다.</param>
      <param name="newName">열의 새 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>     테이블 이름을 바꾸는 작업을 추가합니다. 테이블의 스키마를 변경하려면 MoveTable을 사용합니다.</summary>
      <param name="name">     이름을 바꿀 테이블의 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="newName">     테이블의 새 이름입니다.     스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>     SQL 명령을 실행하는 작업을 추가합니다. </summary>
      <param name="sql">실행할 SQL입니다.</param>
      <param name="suppressTransaction">     마이그레이션 프로세스에 대해 사용 중인 트랜잭션 외부에서 SQL을 실행할지를 나타내는 값입니다.     값을 제공하지 않으면 SQL이 트랜잭션 내에서 실행됩니다. </param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>     업그레이드 프로세스 중 수행할 작업입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>지정된 모델의 마이그레이션 사용과 관련된 구성입니다. 일반적으로는 이 클래스를 사용하지 않고 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />으로부터 파생되는 구성 클래스를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>     DbMigrationsConfiguration 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>     자동 마이그레이션 중 데이터 손실이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.     false로 설정된 경우 자동 마이그레이션 중에 데이터 손실이 발생하면 예외가 발생합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>     데이터베이스 마이그레이션 중 자동 마이그레이션을 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>     마이그레이션을 스캐폴드할 때 사용할 코드 생성기를 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>     마이그레이션할 모델을 나타내는 파생된 DbContext를 가져오거나 설정합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>     지정된 데이터베이스 공급자와 함께 사용하도록 설정된 SQL 생성기를 가져옵니다. </summary>
      <returns>데이터베이스 공급자에 대해 설정된 SQL 생성기입니다.</returns>
      <param name="providerInvariantName">SQL 생성기를 가져올 데이터베이스 공급자의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>     코드 기반 마이그레이션을 포함하는 어셈블리를 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>     코드 기반 마이그레이션이 저장되는 하위 디렉터리를 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>     코드 기반 마이그레이션에 사용되는 네임스페이스를 가져오거나 설정합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>     지정된 데이터베이스 공급자에 대해 사용할 새 SQL 생성기를 추가합니다. </summary>
      <param name="providerInvariantName">SQL 생성기를 설정할 데이터베이스 공급자의 이름입니다.</param>
      <param name="migrationSqlGenerator">사용할 SQL 생성기입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>     마이그레이션할 데이터베이스 연결을 재정의하기 위한 값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>지정된 모델의 마이그레이션 사용과 관련된 구성을 나타냅니다.</summary>
      <typeparam name="TContext">컨텍스트입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>이 인스턴스가 지정한 개체와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>매개 변수 또는 열의 데이터를 지정된 형식으로 가져옵니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>현재 인스턴스의 런타임 형식을 반환합니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식을 나타내는 형식 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>현재 개체의 단순 복사본을 만듭니다.</summary>
      <returns>현재 개체의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>     시드된 데이터를 업데이트하도록 허용하기 위해 최신 마이그레이션으로 업그레이드한 후 실행됩니다. </summary>
      <param name="context">시드된 데이터 업데이트를 위해 사용할 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>기존 마이그레이션을 데이터베이스에 적용하기 위해 사용됩니다. 이 클래스는 지정된 마이그레이션에 대해 업그레이드 및 다운그레이드를 수행하기 위해 사용할 수 있습니다. 모델에 대한 변경 내용에 따라 마이그레이션을 스캐폴드하려면 <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />를 사용하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>     DbMigrator 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="configuration">마이그레이션 프로세스에 사용할 구성입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>     마이그레이션 프로세스에 사용 중인 구성을 가져옵니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>     대상 데이터베이스에 적용된 모든 마이그레이션을 가져옵니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>     구성된 마이그레이션 어셈블리에 정의된 모든 마이그레이션을 가져옵니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>     어셈블리에 정의되었지만 대상 데이터베이스에 적용되지 않은 모든 마이그레이션을 가져옵니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>     마이그레이션을 적용하기 전 데이터베이스의 상태를 나타내는 마이그레이션 ID입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>     대상 데이터베이스를 지정된 마이그레이션으로 업데이트합니다. </summary>
      <param name="targetMigration">업그레이드/다운그레이드를 수행할 마이그레이션입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" />에 대한 확장 메서드 집합입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>SaveChanges를 호출할 때 키에 따라 엔터티를 추가 또는 업데이트합니다. 데이터베이스 용어인 "upsert" 작업과 동일합니다. 이 메서드는 마이그레이션을 사용하여 데이터를 시드할 때 유용할 수 있습니다.</summary>
      <param name="set">생성, 읽기, 업데이트 및 삭제 작업을 수행하기 위해 사용되는 <see cref="T:System.Data.Entity.IDbSet`1" /> 개체입니다.</param>
      <param name="identifierExpression">추가 또는 업데이트 작업을 수행해야 하는지 여부를 확인할 때 사용할 속성을 지정하는 식입니다. </param>
      <param name="entities">추가 또는 업데이트할 엔터티입니다.</param>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>SaveChanges를 호출할 때 키에 따라 엔터티를 추가 또는 업데이트합니다. 데이터베이스 용어인 "upsert" 작업과 동일합니다. 이 메서드는 마이그레이션을 사용하여 데이터를 시드할 때 유용할 수 있습니다.</summary>
      <param name="set">생성, 읽기, 업데이트 및 삭제 작업을 수행하기 위해 사용되는 <see cref="T:System.Data.Entity.IDbSet`1" /> 개체입니다.</param>
      <param name="entities">추가 또는 업데이트할 엔터티입니다.</param>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>열을 구성하는 데 사용되는 도우미 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
      <summary>이진 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="maxLength">배열 데이터의 허용 가능한 최대 길이입니다.</param>
      <param name="fixedLength">모든 데이터를 최대 길이로 채워야 하는지 여부를 나타내는 값입니다.</param>
      <param name="isMaxLength">데이터베이스 공급자에서 지원되는 최대 길이를 사용해야 하는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="timestamp">이 열을 타임스탬프로 구성해야 하는지 여부를 나타내는 값입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <summary>Boolean 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
      <summary>Byte 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="identity">삽입 중 데이터베이스에서 이 열에 대한 값을 생성할지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
      <summary>DateTime 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="precision">열의 전체 자릿수입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
      <summary>DateTimeOffset 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="precision">열의 전체 자릿수입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Decimal 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="precision">열의 전체 자릿수입니다.</param>
      <param name="scale">열의 소수 자릿수입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
      <param name="identity">삽입 중 데이터베이스에서 이 열에 대한 값을 생성할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
      <summary>Double 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 나타냅니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
      <summary>geography 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
      <summary>geometry 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
      <summary>GUID 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="identity">삽입 중 데이터베이스에서 이 열에 대한 값을 생성할지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
      <summary>Integer 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="identity">삽입 중 데이터베이스에서 이 열에 대한 값을 생성할지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
      <summary>Long 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="identity">삽입 중 데이터베이스에서 이 열에 대한 값을 생성할지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>현재 개체의 단순 복사본을 만듭니다.</summary>
      <returns>현재 개체의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
      <summary>Short 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="identity">삽입 중 데이터베이스에서 이 열에 대한 값을 생성할지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
      <summary>Single 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
      <summary>String 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="maxLength">문자열 데이터의 허용 가능한 최대 길이입니다.</param>
      <param name="fixedLength">모든 데이터를 최대 길이로 채워야 하는지 여부를 나타내는 값입니다.</param>
      <param name="isMaxLength">데이터베이스 공급자에서 지원되는 최대 길이를 사용해야 하는지 여부를 나타내는 값입니다.</param>
      <param name="unicode">열이 유니코드 내용을 지원하는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
      <summary>Time 데이터를 저장하기 위한 새 열 정의를 만듭니다.</summary>
      <returns>새로 생성된 열 정의입니다.</returns>
      <param name="nullable">열에 Null 값이 허용되는지 여부를 나타내는 값입니다.</param>
      <param name="precision">열의 전체 자릿수입니다.</param>
      <param name="defaultValue">이 열에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 열에 대한 기본값으로 사용할 SQL 식입니다.</param>
      <param name="name">열의 이름입니다.</param>
      <param name="storeType">이 열에 대해 사용할 공급자별 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigration" />에 대한 CreateTable 호출로부터 생성 중인 테이블을 추가로 구성하기 위해 사용되는 도우미 클래스입니다.</summary>
      <typeparam name="TColumns">테이블의 열에 대한 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Builders.TableBuilder`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createTableOperation">추가로 구성할 테이블 만들기 작업입니다.</param>
      <param name="migration">생성된 테이블의 마이그레이션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>테이블에 생성할 외래 키 제약 조건을 지정합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 그 자체입니다.</returns>
      <param name="principalTable">외래 키 제약 조건이 대상으로 하는 테이블의 이름입니다.</param>
      <param name="dependentKeyExpression">외래 키의 속성을 나타내는 람다 식입니다.      여러 개의 속성으로 외래 키가 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.</param>
      <param name="cascadeDelete">외래 키 제약 조건에 대해 하위 삭제를 구성할지 여부를 나타내는 값입니다. </param>
      <param name="name">이 외래 키 제약 조건의 이름입니다. 이름을 제공하지 않으면 기본 이름이 계산됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다. 인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>현재 개체에 대한 해시 코드를 가져옵니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>현재 개체의 형식을 가져옵니다.</summary>
      <returns>현재 개체의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
      <summary>테이블에 생성할 인덱스를 지정합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 그 자체입니다.</returns>
      <param name="indexExpression">인덱싱할 속성을 나타내는 람다 식입니다.여러 개의 속성을 인덱싱하려는 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.</param>
      <param name="unique">고유한 인덱스인지 여부를 나타내는 값입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다. 인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>현재 개체의 단순 복사본을 만듭니다.</summary>
      <returns>현재 개체의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
      <summary>테이블에 대한 기본 키를 지정합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 그 자체입니다.</returns>
      <param name="keyExpression">기본 키로 사용할 속성을 나타내는 람다 식입니다. 기본 키가 여러 개의 속성으로 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.</param>
      <param name="name">기본 키의 이름입니다. null을 제공하지 않으면 기본 이름이 생성됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다. 인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>현재 개체의 문자열 표현을 반환합니다.</summary>
      <returns>현재 개체의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>코드 기반 마이그레이션에 대한 C# 코드를 생성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
      <summary>
        <see cref="T:System.Byte" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
        <see cref="T:System.Byte[]" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>사용자가 보고 편집할 수 있는 기본 코드 파일을 생성합니다. </summary>
      <returns>생성된 코드입니다.</returns>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>람다 식을 사용하여 열 이름 집합을 지정하기 위한 코드를 생성합니다.</summary>
      <param name="columns">코드를 생성할 열입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="alterColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />에 대한 정의를 지정하기 위한 코드를 생성합니다.</summary>
      <param name="column">코드를 생성할 열 정의입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="emitName">정의에 열 이름을 포함할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="moveTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="renameColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="renameTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="sqlOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeography" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeometry" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>알 수 없는 데이터 형식의 열에 대한 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>
        <see cref="T:System.String" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>마이그레이션 메타데이터와 함께 코드 숨김 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>마이그레이션 메타데이터와 함께 코드 숨김 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="addForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="addPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="createIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>문자열에 저장하도록 허용하기 위해 적합한 이스케이프 처리를 사용하여 식별자에 따옴표를 붙입니다.</summary>
      <returns>따옴표를 붙인 식별자입니다.</returns>
      <param name="identifier">따옴표를 붙일 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>데이터베이스 아티팩트의 이름에서 잘못된 문자를 제거합니다.</summary>
      <returns>삭제된 이름입니다.</returns>
      <param name="name">삭제할 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>지정된 데이터 형식의 열에 사용할 형식 이름을 가져옵니다.</summary>
      <returns>생성된 마이그레이션에 사용할 형식 이름입니다.</returns>
      <param name="primitiveTypeKind">변환할 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>WriteClassStart로 시작된 클래스의 닫는 코드를 생성합니다.</summary>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>문 및 클래스 정의를 사용하여 네임스페이스를 생성합니다.</summary>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="base">생성된 클래스의 기본 클래스입니다.</param>
      <param name="designer">코드 숨김 파일에 대해 이 클래스를 생성 중인지를 나타내는 값입니다.</param>
      <param name="namespaces">using 지시문을 추가할 네임스페이스입니다. Null인 경우 GetDefaultNamespaces에서 반환된 네임스페이스가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>코드 숨김 파일에서 소스 또는 대상 모델을 반환하기 위한 속성을 생성합니다.</summary>
      <param name="name">속성 이름입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>코드 기반 마이그레이션에 대한 코드를 생성하는 공급자의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>     사용자 프로젝트에 추가해야 하는 코드를 생성합니다. </summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary> 생성된 모든 코드에 대해 "using" 또는 "Imports" 지시문으로 출력해야 하는 기본 네임스페이스를 가져옵니다. </summary>
      <returns>정렬된 네임스페이스 이름 목록입니다.</returns>
      <param name="designer">코드 숨김 파일에 대해 이 클래스를 생성 중인지를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary> 지정된 작업으로 생성된 코드를 처리하기 위해 "using" 또는 "Imports" 지시문으로 출력해야 하는 네임스페이스를 가져옵니다. </summary>
      <returns>정렬된 네임스페이스 이름 목록입니다.</returns>
      <param name="operations">코드를 생성할 작업입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>보류 중인 모델 변경 내용을 데이터베이스에 적용하기 위해 코드 기반 마이그레이션을 스캐폴드합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="migrationsConfiguration">스캐폴딩에 사용할 구성입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary> 마이그레이션의 생성된 코드에 사용되는 네임스페이스를 가져오거나 설정합니다.  기본적으로 생성자에 전달되는 마이그레이션 구성 개체의 MigrationsNamespace와 동일합니다. VB.NET 프로젝트의 경우에는 프로젝트의 루트 네임스페이스를 고려하여 업데이트해야 합니다. </summary>
      <returns>마이그레이션의 생성된 코드에 사용되는 네임스페이스입니다.  </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>     모든 보류 중인 모델 변경 내용을 데이터베이스에 적용하기 위해 코드 기반 마이그레이션을 스캐폴드합니다. </summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
      <param name="migrationName">스캐폴드된 마이그레이션에 사용할 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>모든 보류 중인 모델 변경 내용을 데이터베이스에 적용하기 위해 코드 기반 마이그레이션을 스캐폴드합니다.</summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
      <param name="migrationName">스캐폴드된 마이그레이션에 사용할 이름입니다.</param>
      <param name="ignoreChanges">모델 변경 내용을 제외하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary> 이전에 실행된 데이터베이스 이니셜라이저에 따라 초기 코드 기반 마이그레이션이 스캐폴드됩니다.</summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>   스캐폴드되었고 파일에 쓸 준비가 된 코드 기반 마이그레이션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>     코드 숨김 파일에 저장해야 하는 스캐폴드된 마이그레이션 코드를 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>     이 마이그레이션을 저장해야 하는 사용자 프로젝트의 하위 디렉터리를 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>     이 마이그레이션에 사용할 프로그래밍 언어를 가져오거나 설정합니다.     일반적으로 생성된 코드의 파일 확장명에 사용됩니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>     이 마이그레이션의 고유 식별자를 가져오거나 설정합니다.     일반적으로 생성된 코드의 파일 이름에 사용됩니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>     사용자가 편집할 수 있는 스캐폴드된 마이그레이션 코드를 가져오거나 설정합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />의 또 다른 AppDomain에서 작업을 실행하는 동안 발생한 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">throw되는 예외에 대한 serialize된 개체 데이터입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
      <summary>지정된 오류, 내부 예외 형식 및 스택 추적을 사용하여 <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerType">발생한 예외의 형식입니다.</param>
      <param name="innerStackTrace">발생한 예외의 스택 추적입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>대상 개체를 serialize하는 데 필요한 데이터로 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 채웁니다.</summary>
      <param name="info">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">이 serialization에 대한 대상입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
      <summary>발생한 예외의 스택 추적을 가져옵니다. </summary>
      <returns>발생한 예외의 스택 추적입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
      <summary>발생한 예외의 형식을 가져옵니다. </summary>
      <returns>발생한 예외의 형식입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Visual Studio에서 편집 중인 응용 프로그램과 상호 작용해야 하는 마이그레이션 관련 명령을 실행하기 위해 디자인 타임 도구에서 사용되는 도우미 클래스를 나타냅니다.응용 프로그램을 편집하는 중이므로 항상 최신 버전이 로드되도록 보장하기 위해 어셈블리를 별도의 AppDomain에서 로드해야 합니다. 또한 구성이 적용되도록 보장하기 위해 시작 프로젝트의 App/Web.config 파일도 복사됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="assemblyName">사용할 마이그레이션 구성을 포함하는 어셈블리의 이름입니다. </param>
      <param name="configurationTypeName">사용할 마이그레이션 구성의 정규화된 네임스페이스 이름입니다. </param>
      <param name="workingDirectory">컴파일된 어셈블리를 포함하는 작업 디렉터리입니다. </param>
      <param name="configurationFilePath">시작 프로젝트의 구성 파일의 경로입니다. </param>
      <param name="dataDirectory">시작 프로젝트의 응용 프로그램 데이터 디렉터리의 경로입니다. 일반적으로 웹 응용 프로그램에 대한 App_Data 디렉터리 또는 실행 파일에 대한 작업 디렉터리입니다. </param>
      <param name="connectionStringInfo">마이그레이션할 데이터베이스에 대한 연결입니다. null을 제공하지 않으면 컨텍스트에 대한 기본 연결이 사용됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />에서 사용하는 모든 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>facade에서 사용되는 모든 관리되지 않는 리소스를 해제합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 모든 형식의 정규화된 이름을 가져옵니다. </summary>
      <returns>발견된 모든 컨텍스트 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>데이터베이스에 적용된 모든 마이그레이션의 목록을 가져옵니다. </summary>
      <returns>적용된 마이그레이션의 ID입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>데이터베이스에 적용되지 않은 모든 마이그레이션의 목록을 가져옵니다. </summary>
      <returns>보류 중인 마이그레이션의 ID입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>정보를 기록하기 위해 실행할 작업을 가져오거나 설정합니다. </summary>
      <returns>정보를 기록하기 위해 실행할 작업입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>상세 정보를 기록하기 위해 실행할 작업을 가져오거나 설정합니다. </summary>
      <returns>상세 정보를 기록하기 위해 실행할 작업입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>경고를 기록하기 위해 실행할 작업을 가져오거나 설정합니다. </summary>
      <returns>경고를 기록하기 위해 실행할 작업입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>모든 보류 중인 모델 변경 내용을 적용할 코드 기반 마이그레이션을 스캐폴드합니다.</summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
      <param name="migrationName">생성된 마이그레이션에 대한 이름입니다.</param>
      <param name="language">생성된 마이그레이션의 프로그래밍 언어입니다.</param>
      <param name="rootNamespace">마이그레이션을 추가할 프로젝트의 루트 네임스페이스입니다.</param>
      <param name="ignoreChanges">모델 변경 내용을 제외하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>이전에 실행된 데이터베이스 이니셜라이저에 따라 초기 코드 기반 마이그레이션이 스캐폴드됩니다. </summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
      <param name="language">생성된 마이그레이션의 프로그래밍 언어입니다.</param>
      <param name="rootNamespace">마이그레이션을 추가할 프로젝트의 루트 네임스페이스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>두 마이그레이션 사이에 마이그레이션할 SQL 스크립트를 생성합니다. </summary>
      <returns>생성된 SQL 스크립트입니다.</returns>
      <param name="sourceMigration">업데이트할 마이그레이션입니다. Null이 제공된 경우 현재 데이터베이스를 업데이트할 스크립트가 생성됩니다. </param>
      <param name="targetMigration">업데이트할 마이그레이션입니다. Null이 제공된 경우 최신 마이그레이션으로 업데이트할 스크립트가 생성됩니다. </param>
      <param name="force">자동 마이그레이션 중 데이터 손실이 허용되는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>데이터베이스를 지정된 마이그레이션으로 업데이트합니다. </summary>
      <param name="targetMigration">마이그레이션할 마이그레이션 ID입니다. Null이 제공된 경우 데이터베이스가 최신 마이그레이션으로 업데이트됩니다. </param>
      <param name="force">자동 마이그레이션 중 데이터 손실이 허용되는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>코드 기반 마이그레이션에 대한 Visual Basic .Net 코드를 생성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
      <summary>
        <see cref="T:System.Byte" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
        <see cref="T:System.Byte[]" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>사용자가 보고 편집할 수 있는 기본 코드 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>람다 식을 사용하여 열 이름 집합을 지정하기 위한 코드를 생성합니다.</summary>
      <param name="columns">코드를 생성할 열입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="addPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="alterColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />에 대한 정의를 지정하기 위한 코드를 생성합니다. </summary>
      <param name="column">코드를 생성할 열 정의입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="emitName">정의에 열 이름을 포함할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="dropForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="dropIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="dropPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="dropTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="moveTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="renameColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="renameTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />을 수행할 코드를 생성합니다. </summary>
      <param name="sqlOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeography" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeometry" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>     알 수 없는 데이터 형식의 열에 대한 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>
        <see cref="T:System.String" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>마이그레이션 메타데이터와 함께 코드 숨김 파일을 생성합니다. </summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>마이그레이션 메타데이터와 함께 코드 숨김 파일을 생성합니다. </summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 열의 기본값을 지정하기 위한 코드를 생성합니다. </summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다. </summary>
      <param name="addForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다. </summary>
      <param name="addPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다. </summary>
      <param name="createIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>     문자열에 저장하도록 허용하기 위해 적합한 이스케이프 처리를 사용하여 식별자에 따옴표를 붙입니다. </summary>
      <returns>따옴표를 붙인 식별자입니다.</returns>
      <param name="identifier">따옴표를 붙일 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>     데이터베이스 아티팩트의 이름에서 잘못된 문자를 제거합니다. </summary>
      <returns>삭제된 이름입니다.</returns>
      <param name="name">삭제할 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     지정된 데이터 형식의 열에 사용할 형식 이름을 가져옵니다. </summary>
      <returns>생성된 마이그레이션에 사용할 형식 이름입니다.</returns>
      <param name="primitiveTypeKind">변환할 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary> WriteClassStart로 시작된 클래스의 닫는 코드를 생성합니다. </summary>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>     문 및 클래스 정의를 사용하여 네임스페이스를 생성합니다. </summary>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="base">생성된 클래스에 대한 기본 클래스입니다.</param>
      <param name="designer">코드 숨김 파일에 대해 이 클래스를 생성 중인지를 나타내는 값입니다.</param>
      <param name="namespaces">Imports 지시문을 추가할 네임스페이스입니다. Null인 경우 GetDefaultNamespaces에서 반환된 네임스페이스가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     코드 숨김 파일에서 소스 또는 대상 모델을 반환하기 위한 속성을 생성합니다. </summary>
      <param name="name">속성 이름</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>   이 클래스는 Code First 마이그레이션이 데이터베이스에서 마이그레이션 기록을 읽고 쓰기 위해 사용됩니다. 이 클래스는 다른 코드에서 사용할 수 없으며 부분 신뢰로 실행 중일 때 Entity Framework가 액세스할 수 있도록 하기 위해서만 공개로 설정됩니다. 이 클래스는 이후에 변경 또는 제거할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
      <summary>     이 마이그레이션 기록 항목을 만든 날짜 및 시간을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>     이 행이 나타내는 마이그레이션의 ID를 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>     이 마이그레이션을 적용한 후 모델의 상태를 가져오거나 설정합니다. </summary>
      <returns>
        <see cref="T:System.Byte" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>     이 항목을 만든 Entity Framework의 버전을 가져오거나 설정합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>자동 마이그레이션으로 데이터 손실이 일어날 때 발생하는 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>     AutomaticDataLossException 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>마지막 마이그레이션을 적용한 후 보류 중인 모델 변경 내용이 있고 자동 마이그레이션이 사용하지 않도록 설정되었을 때 발생하는 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>     AutomaticMigrationsDisabledException 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>코드 기반 마이그레이션에 대한 추가 메타데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>     마이그레이션의 고유 식별자를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>     이 마이그레이션을 실행하기 전 모델의 상태를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>     이 마이그레이션을 실행한 후 모델의 상태를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Code First 마이그레이션 파이프라인 내에서 발생하는 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> serialize된 데이터를 사용하여 MigrationsException 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="info">발생 중인 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary> MigrationsException 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>마이그레이션 프로세스에 대해 사용할 수 있는 로거의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>     정보 메시지를 기록합니다. </summary>
      <param name="message">기록할 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>     자세한 정보 출력이 요청된 경우 사용자에게만 제공되는 일부 추가 정보를 기록합니다. </summary>
      <param name="message">기록할 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>     사용자에게 알려야 하는 경고를 기록합니다. </summary>
      <param name="message">기록할 메시지입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>핵심 <see cref="T:System.Data.Entity.Migrations.DbMigrator" />를 래핑하는 데코레이터의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>     MigratorBase 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="innerMigrator">이 데코레이터가 래핑하는 마이그레이터입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>     마이그레이션 프로세스에 사용 중인 구성을 가져옵니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>     데이터베이스에 적용된 마이그레이션의 목록을 가져옵니다. </summary>
      <returns>마이그레이션 ID 목록</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>     어셈블리에 정의된 마이그레이션 목록을 가져옵니다. </summary>
      <returns>마이그레이션 ID 목록</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>     데이터베이스에 적용되지 않은 보류 중인 마이그레이션의 목록을 가져옵니다. </summary>
      <returns>마이그레이션 ID 목록</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>     대상 데이터베이스를 최신 마이그레이션으로 업데이트합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>     대상 데이터베이스를 지정된 마이그레이션으로 업데이트합니다. </summary>
      <param name="targetMigration">업그레이드/다운그레이드를 수행할 마이그레이션입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>마이그레이션 작업 중 로깅을 제공하는 데코레이터입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>     MigratorLoggingDecorator 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="innerMigrator">이 데코레이터가 래핑하는 마이그레이터입니다.</param>
      <param name="logger">메시지를 쓸 로거입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>변경 내용을 데이터베이스에 적용하는 대신 SQL 스크립트를 생성하는 데코레이터를 나타냅니다. 이 데코레이터를 사용하여 <see cref="T:System.Data.Entity.Migrations.DbMigrator" />를 래핑하면 <see cref="T:System.Data.Entity.Migrations.DbMigrator" />가 변경 내용을 대상 데이터베이스에 적용할 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="innerMigrator">이 데코레이터가 래핑하는 마이그레이터입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>데이터베이스를 대상 마이그레이션으로 업데이트합니다.</summary>
      <returns>생성된 SQL 스크립트입니다.</returns>
      <param name="sourceMigration">소스 마이그레이션입니다.</param>
      <param name="targetMigration">업그레이드/다운그레이드를 수행할 마이그레이션입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>테이블에 추가 중인 열을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>     AddColumnOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">열을 추가할 테이블의 이름입니다.</param>
      <param name="column">추가 중인 열의 세부 정보입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>     추가 중인 열의 세부 정보를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>     추가된 열의 삭제를 나타내는 작업을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>{여기에 텍스트를 삽입}을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>     열을 추가할 테이블의 이름을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>테이블에 추가 중인 외래 키 제약 조건을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>     AddForeignKeyOperation 클래스의 새 인스턴스를 초기화합니다.     PrincipalTable, PrincipalColumns, DependentTable 및 DependentColumns 속성도 채워야 합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>     외래 키 제약 조건에 대해 하위 삭제를 구성할지 여부를 나타내는 값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>     외래 키 열에서 인덱스를 만드는 작업을 가져옵니다. </summary>
      <returns>인덱스를 추가하는 작업입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>     외래 키 제약 조건을 삭제하는 작업을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>     외래 키 제약 조건이 대상으로 지정하는 열의 이름입니다. </summary>
      <returns>열 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>테이블에 기본 키 추가를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     AddPrimaryKeyOperation 클래스의 새 인스턴스를 초기화합니다.     Table 및 Columns 속성도 채워야 합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>     기본 키를 삭제하는 작업을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>기존 열의 변경을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>     AlterColumnOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">열이 속하는 테이블의 이름입니다.</param>
      <param name="column">열을 변경할 대상에 대한 세부 정보입니다.</param>
      <param name="isDestructiveChange">이 변경으로 인해 데이터 손실이 발생하는지 여부를 나타내는 값입니다.</param>
      <param name="inverse">이 열 변경을 되돌리는 작업입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>     AlterColumnOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">열이 속하는 테이블의 이름입니다.</param>
      <param name="column">열을 변경할 대상에 대한 세부 정보입니다.</param>
      <param name="isDestructiveChange">이 변경으로 인해 데이터 손실이 발생하는지 여부를 나타내는 값입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>     열의 새 정의를 가져옵니다. </summary>
      <returns>열 정의입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>     변경 되돌리기를 나타내는 작업을 가져옵니다.     역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>     열이 속하는 테이블의 이름을 가져옵니다. </summary>
      <returns>테이블 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>열에 대한 정보를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="type">이 열의 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
      <summary>     클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="type">이 열의 데이터 형식입니다.</param>
      <param name="typeUsage">     데이터 형식에 대한 추가 세부 정보입니다.     여기에는 최대 길이, null 허용 여부 등의 세부 정보가 포함됩니다. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>     이 열의 데이터베이스 형식에 해당하는 CLR 형식의 기본값을 가져옵니다. </summary>
      <returns>기본값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>     이 열의 데이터베이스 형식에 해당하는 CLR 형식을 가져옵니다. </summary>
      <returns>CLR 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
      <summary>     이 열에 대한 기본값으로 사용할 상수 값을 가져오거나 설정합니다. </summary>
      <returns>열의 기본값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
      <summary>     이 열에 대한 기본값으로 사용할 SQL 식을 가져오거나 설정합니다. </summary>
      <returns>열의 기본값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
      <summary>     이 열이 고정 길이인지 여부를 나타내는 값을 가져오거나 설정합니다.     배열 데이터 형식의 경우에만 유효합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>     ID 패턴을 사용하는 데이터베이스에서 이 열에 대한 값을 생성할지 여부를 나타내는 값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
      <summary>     이 열이 다른 열보다 좁은 범위의 데이터 형식인지 여부를 확인합니다.     제공된 열 정의를 이 정의로 변경할 경우 데이터 손실이 발생하는지 여부를 확인하는 데 사용됩니다. </summary>
      <returns>이 열이 더 좁은 범위의 데이터 형식인 경우 True입니다.</returns>
      <param name="column">비교할 열입니다.</param>
      <param name="providerManifest">사용 중인 데이터베이스 공급자의 세부 정보입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>     이 열이 null 값을 저장할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>     이 열을 타임스탬프로 구성해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
      <summary>     이 열이 유니코드 문자를 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.     텍스트 데이터 형식의 경우에만 유효합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
      <summary>     이 열에 대한 최대 길이를 가져오거나 설정합니다.     배열 데이터 형식의 경우에만 유효합니다. </summary>
      <returns>최대 길이입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
      <summary>     열의 이름을 가져오거나 설정합니다. </summary>
      <returns>이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
      <summary>     이 열에 대한 전체 자릿수를 가져오거나 설정합니다.     10진수 텍스트 데이터 형식의 경우에만 유효합니다. </summary>
      <returns>전체 자릿수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
      <summary>     이 열에 대한 소수 자릿수를 가져오거나 설정합니다.     10진수 텍스트 데이터 형식의 경우에만 유효합니다. </summary>
      <returns>소수 자릿수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
      <summary>     이 열에 대해 사용할 공급자별 데이터 형식을 가져오거나 설정합니다. </summary>
      <returns>데이터 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
      <summary>     이 열의 데이터 형식을 가져옵니다. </summary>
      <returns>데이터 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
      <summary>     이 열의 데이터 형식에 대한 추가 세부 정보를 가져옵니다.     여기에는 최대 길이, null 허용 여부 등의 세부 정보가 포함됩니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>데이터베이스 인덱스 만들기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>     CreateIndexOperation 클래스의 새 인스턴스를 초기화합니다.     Table 및 Columns 속성도 채워야 합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>     이 인덱스를 삭제하는 작업을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>     고유한 인덱스인지를 나타내는 값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>테이블 만들기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>     CreateTableOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="name">만들려는 테이블의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>     새 테이블에 포함할 열을 가져옵니다. </summary>
      <returns>포함할 열입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>     테이블을 삭제하는 작업을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>     만들려는 테이블의 이름을 가져옵니다. </summary>
      <returns>이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>     새 테이블의 기본 키를 가져오거나 설정합니다. </summary>
      <returns>기본 키입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
      <summary>마이그레이션 기록 테이블에서 새 레코드 삭제를 나타냅니다. 마이그레이션 기록 테이블은 데이터베이스에 적용된 마이그레이션의 로그를 저장하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     DeleteHistoryOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">마이그레이션 기록 테이블의 이름입니다.</param>
      <param name="migrationId">삭제할 마이그레이션 레코드의 ID입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>테이블에서 삭제 중인 열을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>     DropColumnOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">열을 삭제할 테이블의 이름입니다.</param>
      <param name="name">삭제할 열의 이름입니다.</param>
      <param name="inverse">삭제 작업 되돌리기를 나타내는 작업입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     DropColumnOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">열을 삭제할 테이블의 이름입니다.</param>
      <param name="name">삭제할 열의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>     열 삭제 되돌리기를 나타내는 작업을 가져옵니다.     역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>     삭제하려는 열의 이름을 가져옵니다. </summary>
      <returns>열 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>     열을 삭제할 테이블의 이름을 가져옵니다. </summary>
      <returns>테이블 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>테이블에서 삭제 중인 외래 키 제약 조건을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>     DropForeignKeyOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="inverse">외래 키 제약 조건 삭제 되돌리기를 나타내는 작업입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>     DropForeignKeyOperation 클래스의 새 인스턴스를 초기화합니다.     PrincipalTable, DependentTable 및 DependentColumns 속성도 채워야 합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>     외래 키 열에서 연관된 인덱스를 삭제하는 작업을 가져옵니다. </summary>
      <returns>인덱스를 삭제하는 작업입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>     외래 키 제약 조건 삭제 되돌리기를 나타내는 작업을 가져옵니다.     역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>기존 인덱스의 삭제를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>     DropIndexOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="inverse">인덱스 삭제 되돌리기를 나타내는 작업입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>     DropIndexOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>     인덱스 삭제 되돌리기를 나타내는 작업을 가져옵니다.     역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>테이블에서 기본 키 삭제를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     DropPrimaryKeyOperation 클래스의 새 인스턴스를 초기화합니다.     Table 및 Columns 속성도 채워야 합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>     기본 키를 추가하는 작업을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>기존 테이블의 삭제를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>     DropTableOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="name">삭제할 테이블의 이름입니다.</param>
      <param name="inverse">테이블 삭제 되돌리기를 나타내는 작업입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>     DropTableOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="name">삭제할 테이블의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>     테이블 삭제 되돌리기를 나타내는 작업을 가져옵니다.     역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>     삭제하려는 테이블의 이름을 가져옵니다. </summary>
      <returns>테이블 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>외래 키 제약 조건에 영향을 주는 변경 내용에 대한 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>     ForeignKeyOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>     외래 키 열 이름입니다. </summary>
      <returns>열 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>     외래 키 열이 존재하는 테이블의 이름을 가져오거나 설정합니다. </summary>
      <returns>테이블 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>     이 외래 키 제약 조건에 대해 특정 이름이 제공되었는지 여부를 나타내는 값을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>     이 외래 키 제약 조건의 이름을 가져오거나 설정합니다.     이름을 제공하지 않으면 기본 이름이 계산됩니다. </summary>
      <returns>제약 조건 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>     외래 키 제약 조건이 대상으로 지정하는 테이블의 이름을 가져오거나 설정합니다. </summary>
      <returns>테이블 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>마이그레이션 기록 테이블에 영향을 주는 작업에 대한 공통 기본 클래스입니다.  마이그레이션 기록 테이블은 데이터베이스에 적용된 마이그레이션의 로그를 저장하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     HistoryOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">마이그레이션 기록 테이블의 이름입니다.</param>
      <param name="migrationId">영향을 받는 마이그레이션의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
      <summary>     영향을 받는 마이그레이션의 이름을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
      <summary>     마이그레이션 기록 테이블의 이름을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>인덱스에 영향을 주는 작업에 대한 공통 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>     IndexOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>     인덱싱되는 열을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>     이 인덱스에 대해 특정 이름이 제공되었는지 여부를 나타내는 값을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>     이 인덱스의 이름을 가져오거나 설정합니다.     이름을 제공하지 않으면 기본 이름이 계산됩니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>     인덱스가 속하는 테이블을 가져오거나 설정합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
      <summary>마이그레이션 기록 테이블에 새 레코드 삽입을 나타냅니다. 마이그레이션 기록 테이블은 데이터베이스에 적용된 마이그레이션의 로그를 저장하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
      <summary>     InsertHistoryOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">마이그레이션 기록 테이블의 이름입니다.</param>
      <param name="migrationId">삽입할 마이그레이션 레코드의 ID입니다.</param>
      <param name="model">모델 열에 저장할 값입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
      <summary>{여기에 텍스트를 삽입}을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
      <summary>     마이그레이션의 대상 모델을 나타내는 기록 테이블에 저장할 값을 가져옵니다. </summary>
      <returns>
        <see cref="T:System.Byte" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
      <summary>     이 마이그레이션을 생성하기 위해 사용된 Entity Framework 버전을 나타내는 기록 테이블에 저장할 값을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>데이터베이스 스키마 수정 작업을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>     MigrationOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="anonymousArguments">       인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>     공급자가 처리할 수 있는 추가 인수를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>     이 작업을 되돌리는 작업을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>     이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>한 스키마에서 다른 스키마로 테이블 이동을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     MoveTableOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="name">이동할 테이블의 이름입니다.</param>
      <param name="newSchema">테이블을 이동할 스키마의 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>     테이블을 다시 원래 스키마로 이동하는 작업을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>     이동하려는 테이블의 이름을 가져옵니다. </summary>
      <returns>이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>     테이블을 이동할 스키마의 이름을 가져옵니다. </summary>
      <returns>스키마 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>기본 키에 영향을 주는 작업을 나타내는 공통 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>     PrimaryKeyOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>     기본 키를 구성하는 열을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>     이 기본 키에 대해 특정 이름이 제공되었는지 여부를 나타내는 값을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>     이 기본 키의 이름을 가져오거나 설정합니다.     이름을 제공하지 않으면 기본 이름이 계산됩니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>     기본 키를 포함하는 테이블의 이름을 가져오거나 설정합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>기존 열의 이름 바꾸기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>     RenameColumnOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="table">열이 속하는 테이블의 이름입니다.</param>
      <param name="name">이름을 바꿀 열의 이름입니다.</param>
      <param name="newName">열의 새 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>     이름 바꾸기를 되돌리는 작업을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>     이름을 바꾸려는 열의 이름을 가져옵니다. </summary>
      <returns>이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>     열의 새 이름을 가져옵니다. </summary>
      <returns>새 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>     열이 속하는 테이블의 이름을 가져옵니다. </summary>
      <returns>테이블 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>  기존 테이블의 이름 바꾸기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     RenameTableOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="name">이름을 바꿀 테이블의 이름입니다.</param>
      <param name="newName">테이블의 새 이름입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>     이름 바꾸기를 되돌리는 작업을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>     이름을 바꾸려는 테이블의 이름을 가져옵니다. </summary>
      <returns>이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>     테이블의 새 이름을 가져옵니다. </summary>
      <returns>새 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>대상 데이터베이스에 대해 직접 실행할 공급자별 SQL 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>     SqlOperation 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="sql">실행할 SQL입니다.</param>
      <param name="anonymousArguments">     공급자가 처리할 수 있는 추가 인수입니다.      인수를 지정하려면 익명 형식의 구문을 사용합니다. 예: 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>     실행할 SQL을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>     마이그레이션 프로세스를 트랜잭션 가능하도록 만들기 위해 사용되는 트랜잭션 범위 외부에서 이 문을 수행해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.     true로 설정된 경우 마이그레이션 프로세스가 실패해도 작업이 롤백되지 않습니다. </summary>
      <returns>마이그레이션이 실패해도 작업이 롤백되지 않으면 true입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>   공급자를 알 수 없는 마이그레이션 작업을 데이터베이스 공급자의 특정 SQL 명령으로 변환하는 공급자에 대한 공통 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>     마이그레이션 작업 집합을 데이터베이스 공급자의 특정 SQL로 변환합니다. </summary>
      <returns>마이그레이션 작업을 수행하기 위해 실행할 SQL 문 목록입니다.</returns>
      <param name="migrationOperations">변환할 작업입니다.</param>
      <param name="providerManifestToken">대상으로 지정 중인 데이터베이스의 버전을 나타내는 토큰입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>SQL 문으로 변환된 마이그레이션 작업을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>     이 마이그레이션 작업을 수행하기 위해 실행할 SQL을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>     마이그레이션 프로세스를 트랜잭션 가능하도록 만들기 위해 사용되는 트랜잭션 범위 외부에서 이 문을 수행해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.     true로 설정된 경우 마이그레이션 프로세스가 실패해도 작업이 롤백되지 않습니다. </summary>
      <returns>마이그레이션 프로세스가 실패해도 작업이 롤백되지 않으면 true이고 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
      <summary>공급자를 알 수 없는 마이그레이션 작업을 Microsoft SQL Server Compact Edition에 대해 실행할 수 있는 SQL 명령으로 변환하기 위한 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
      <summary>현재 공급자에 대한 빈 연결을 만듭니다. 파생된 공급자가 <see cref="T:System.Data.SqlClient.SqlConnection" /> 이외의 연결을 사용할 수 있도록 허용합니다.</summary>
      <returns>현재 공급자에 대한 빈 연결입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다.</summary>
      <param name="alterColumnOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다.</summary>
      <param name="dropColumnOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다.</summary>
      <param name="dropIndexOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다.</summary>
      <param name="moveTableOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다.</summary>
      <param name="renameColumnOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다.</summary>
      <param name="renameTableOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>열에 설정하려는 상수 DateTime 기본값을 지정하는 SQL을 생성합니다.     이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다.</summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>데이터베이스 스키마를 만들기 위한 SQL을 생성합니다. 생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다.</summary>
      <param name="schema">만들려는 데이터베이스 스키마입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>테이블을 시스템 테이블로 표시하기 위한 SQL을 생성합니다. 생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다.</summary>
      <param name="createTableOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
      <summary>따옴표가 붙은 이름을 생성합니다. 제공된 이름은 스키마를 포함하거나 포함하지 않을 수 있습니다.</summary>
      <returns>따옴표가 붙은 이름입니다.</returns>
      <param name="name">따옴표를 붙일 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
      <summary>공급자를 알 수 없는 마이그레이션 작업을 Microsoft SQL Server에 대해 실행할 수 있는 SQL 명령으로 변환하기 위한 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
      <summary>열의 데이터 형식을 지정하기 위한 SQL을 생성합니다. 이 메서드는 열을 만들기 위한 SQL이 아니라 실제 형식만 생성합니다. </summary>
      <returns>데이터 형식을 나타내는 SQL입니다.</returns>
      <param name="column">SQL이 생성되는 열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
      <summary>현재 공급자에 대한 빈 연결을 만듭니다. 파생된 공급자가 <see cref="T:System.Data.SqlClient.SqlConnection" /> 이외의 연결을 사용할 수 있도록 허용합니다.</summary>
      <returns>현재 공급자에 대한 빈 연결입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
      <summary>열에 설정하려는 상수 bool 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다.</summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
      <summary>열에 설정하려는 상수 byte[] 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>마이그레이션 작업 집합을 Microsoft SQL Server의 특정 SQL로 변환합니다. </summary>
      <returns>마이그레이션 작업을 수행하기 위해 실행할 SQL 문 목록입니다.</returns>
      <param name="migrationOperations">변환할 작업입니다.</param>
      <param name="providerManifestToken">대상으로 지정된 SQL Server의 버전(예: "2005", "2008")을 나타내는 토큰입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="addColumnOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="addForeignKeyOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="addPrimaryKeyOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="alterColumnOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="createIndexOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="createTableOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="deleteHistoryOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="dropColumnOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="dropForeignKeyOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="dropIndexOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="dropPrimaryKeyOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="dropTableOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="insertHistoryOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="moveTableOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="renameColumnOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="renameTableOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />에 대한 SQL을 생성합니다.     생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="sqlOperation">SQL을 생성할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>열에 설정하려는 상수 geography 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>열에 설정하려는 상수 geometry 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>열에 설정하려는 상수 DateTime 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
      <summary>열에 설정하려는 상수 DateTimeOffset 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
      <summary>열에 설정하려는 상수 Guid 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
      <summary>열에 설정하려는 상수 기본값을 지정하는 SQL을 생성합니다.     이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
      <summary>열에 설정하려는 상수 문자열 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
      <summary>열에 설정하려는 상수 TimeSpan 기본값을 지정하는 SQL을 생성합니다. 이 메서드는 기본값을 설정하는 SQL이 아니라 실제 값만 생성합니다. </summary>
      <returns>기본값을 나타내는 SQL입니다.</returns>
      <param name="defaultValue">설정할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>데이터베이스 스키마를 만들기 위한 SQL을 생성합니다. 생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="schema">만들려는 데이터베이스 스키마입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>테이블을 시스템 테이블로 표시하기 위한 SQL을 생성합니다. 생성된 SQL은 Statement 메서드를 사용하여 추가해야 합니다. </summary>
      <param name="createTableOperation">시스템 테이블로 표시하려는 테이블입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
      <summary>따옴표가 붙은 이름을 생성합니다. 제공된 이름은 스키마를 포함하거나 포함하지 않을 수 있습니다. </summary>
      <returns>따옴표가 붙은 생성된 이름입니다.</returns>
      <param name="name">따옴표를 붙일 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
      <summary>SQL Server의 식별자에 따옴표를 붙입니다. </summary>
      <returns>따옴표를 붙인 SQL Server의 식별자입니다.</returns>
      <param name="identifier">따옴표를 붙일 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>데이터베이스에 대해 실행할 새 문을 추가합니다. </summary>
      <param name="writer">실행할 SQL이 포함된 작성기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
      <summary>데이터베이스에 대해 실행할 새 문을 추가합니다. </summary>
      <param name="sql">실행할 문입니다.</param>
      <param name="suppressTransaction">마이그레이션 프로세스를 트랜잭션 가능하도록 만들기 위해 사용되는 트랜잭션 범위 외부에서 이 문을 수행해야 하는지 여부를 나타내는 값입니다. true로 설정된 경우 마이그레이션 프로세스가 실패해도 작업이 롤백되지 않습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
      <summary>SQL을 생성하기 위해 사용할 수 있는 새 <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" />를 가져옵니다. 작성기를 만들기 위한 도우미 메서드일 뿐입니다. 작성기에 써도 SQL이 실행되도록 등록되지 않습니다. Statement 메서드에 생성된 SQL을 전달해야 합니다. </summary>
      <returns>SQL 생성을 위해 사용할 빈 텍스트 작성기입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>T:System.CodeDom.Compiler.IndentedTextWriter와 동일하지만 부분 신뢰로 작동합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>     지정된 텍스트 작성기 및 기본 탭 문자열을 사용하여 IndentedTextWriter 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="writer">출력에 사용할 <see cref="T:System.IO.TextWriter" />입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>     지정된 텍스트 작성기 및 탭 문자열을 사용하여 IndentedTextWriter 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="writer">출력에 사용할 <see cref="T:System.IO.TextWriter" />입니다. </param>
      <param name="tabString">들여쓰기에 사용할 탭 문자열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>     작성 중인 문서를 닫습니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>     기본 탭 문자열을 지정합니다. 이 필드는 상수입니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>     텍스트 작성기에서 사용할 인코딩을 가져옵니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>     스트림을 플러시합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>     들여쓸 공백의 수를 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>     사용할 <see cref="T:System.IO.TextWriter" />를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>     사용할 줄 바꿈 문자를 가져오거나 설정합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>
        <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 속성에 따라 각 들여쓰기 수준마다 탭 문자열을 출력합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>     텍스트 스트림에 Boolean 값의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 Boolean 값입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>     텍스트 스트림에 문자를 씁니다. </summary>
      <param name="value">쓸 문자입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>     텍스트 스트림에 문자 배열을 씁니다. </summary>
      <param name="buffer">쓸 문자 배열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>     텍스트 스트림에 문자의 하위 배열을 씁니다. </summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다. </param>
      <param name="index">버퍼의 시작 인덱스입니다. </param>
      <param name="count">쓸 문자 수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>     Double 값의 텍스트 표현을 텍스트 스트림에 씁니다. </summary>
      <param name="value">쓸 double입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>     텍스트 스트림에 정수의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 정수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>     텍스트 스트림에 8바이트 정수의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 8바이트 정수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>     텍스트 스트림에 개체의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 개체입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>     Single 값의 텍스트 표현을 텍스트 스트림에 씁니다. </summary>
      <param name="value">쓸 single입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>     텍스트 스트림에 지정된 문자열을 씁니다. </summary>
      <param name="s">쓸 문자열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>     지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 씁니다. </summary>
      <param name="format">서식 지정 문자열입니다. </param>
      <param name="arg0">서식이 지정된 문자열에 쓸 개체입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>     지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 씁니다. </summary>
      <param name="format">사용할 서식 지정 문자열입니다. </param>
      <param name="arg0">서식 지정 문자열에 쓸 첫째 개체입니다. </param>
      <param name="arg1">서식 지정 문자열에 쓸 둘째 개체입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>     지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 씁니다. </summary>
      <param name="format">사용할 서식 지정 문자열입니다. </param>
      <param name="arg">출력할 인수 배열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>     줄 마침 표시를 씁니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 Boolean 값의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 Boolean입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 문자를 씁니다. </summary>
      <param name="value">쓸 문자입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 문자 배열을 씁니다. </summary>
      <param name="buffer">쓸 문자 배열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 문자의 하위 배열을 씁니다. </summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다. </param>
      <param name="index">버퍼의 시작 인덱스입니다. </param>
      <param name="count">쓸 문자 수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 Double 값의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 double입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 정수의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 정수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 8바이트 정수의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 8바이트 정수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 개체의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 개체입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 Single 값의 텍스트 표현을 씁니다. </summary>
      <param name="value">쓸 single입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 지정된 문자열을 씁니다. </summary>
      <param name="s">쓸 문자열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>     지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 줄 마침 표시가 다음에 오도록 씁니다. </summary>
      <param name="format">서식 지정 문자열입니다. </param>
      <param name="arg0">서식이 지정된 문자열에 쓸 개체입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>     지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 줄 마침 표시가 다음에 오도록 씁니다. </summary>
      <param name="format">사용할 서식 지정 문자열입니다. </param>
      <param name="arg0">서식 지정 문자열에 쓸 첫째 개체입니다. </param>
      <param name="arg1">서식 지정 문자열에 쓸 둘째 개체입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>     지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 줄 마침 표시가 다음에 오도록 씁니다. </summary>
      <param name="format">사용할 서식 지정 문자열입니다. </param>
      <param name="arg">출력할 인수 배열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>     텍스트 스트림에 줄 마침 표시가 다음에 오도록 UInt32 값의 텍스트 표현을 씁니다. </summary>
      <param name="value">출력할 UInt32입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>     탭 없는 줄에 지정된 문자열을 씁니다. </summary>
      <param name="s">쓸 문자열입니다. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary> 모델의 복합 형식에 대해 구성을 수행할 수 있도록 합니다.  <see cref="M:System.Data.Entity.DbModelBuilder.ComplexType``1" /> 메서드를 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />을 가져오거나, <see cref="P:System.Data.Entity.DbModelBuilder.Configurations" /> 속성을 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />에서 파생된 사용자 지정 형식을 등록할 수 있습니다. </summary>
      <typeparam name="TComplexType">구성할 복합 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>모델의 엔터티 형식에 대해 구성을 수행할 수 있도록 합니다.  <see cref="T:System.Data.Entity.DbModelBuilder" />의 Entity 메서드를 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />을 가져오거나, <see cref="T:System.Data.Entity.DbModelBuilder" />의 Configurations 속성을 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />에서 파생된 사용자 지정 형식을 등록할 수 있습니다. </summary>
      <typeparam name="TEntityType">엔터티 형식을 나타냅니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary> 이 엔터티 형식에 사용할 엔터티 집합 이름을 구성합니다. 엔터티 집합 이름은 각 집합의 기본 형식에 대해서만 구성할 수 있습니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="entitySetName">엔터티 집합의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 이 엔터티 형식의 기본 키 속성을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="keyExpression"> 기본 키로 사용할 속성을 나타내는 람다 식입니다.  예를 들어 t =&gt; t.Id    (C#의 경우) 및 Function(t) t.Id(Visual Basic .Net의 경우)와 같은 식입니다.  기본 키가 여러 개의 속성으로 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.  예를 들어 t =&gt; new { t.Id1, t.Id2 }(C#의 경우) 및 Function(t) New From { t.Id1, t.Id2 }(Visual Basic .Net의 경우)와 같은 식입니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary> 이 엔터티 형식에서 시작되는 다 관계를 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다.</param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 End에 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 이 엔터티 형식에서 시작되는 선택적 관계를 구성합니다. 이 엔터티 형식의 인스턴스는 이 관계를 지정하지 않고도 데이터베이스에 저장할 수 있게 됩니다. 데이터베이스의 외래 키는 null을 허용합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다.</param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 End에 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 이 엔터티 형식에서 시작되는 필수 관계를 구성합니다. 이 엔터티 형식의 인스턴스는 이 관계를 지정하지 않으면 데이터베이스에 저장할 수 없게 됩니다. 데이터베이스의 외래 키는 null을 허용하지 않습니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다. </param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 End에 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary> 파생된 엔터티 형식이 데이터베이스 스키마에 매핑되는 방식과 관련된 고급 구성을 수행할 수 있도록 합니다. 이 메서드에 대한 호출은 누적 방식으로 수행되며, 후속 호출로 인해 이 메서드에 대한 이전 호출에서 이미 수행된 구성이 재정의되지 않습니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="derivedTypeMapConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />에 대한 구성을 수행하는 동작입니다.</param>
      <typeparam name="TDerived">구성할 파생된 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary> 이 엔터티 형식이 데이터베이스 스키마에 매핑되는 방식과 관련된 고급 구성을 수행할 수 있도록 합니다. 기본적으로 모든 구성은 해당 엔터티 형식에서 파생된 형식에도 적용됩니다.  파생 형식을 구성하는 이 메서드의 특정 오버로드를 사용하거나 파생 형식의 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />을 사용하여 파생 형식을 구성할 수 있습니다.  이 메서드를 여러 번 호출하여 엔터티의 속성을 여러 테이블에 분할할 수 있습니다.  호출은 누적 방식으로 수행되며, 후속 호출로 인해 이 메서드에 대한 이전 호출에서 이미 수행된 구성이 재정의되지 않습니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="entityMappingConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />에 대한 구성을 수행하는 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>이 엔터티 형식이 매핑되는 대상 테이블 이름을 구성합니다. </summary>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary> 이 엔터티 형식이 매핑되는 대상 테이블 이름을 구성합니다. </summary>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 데이터베이스 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary> 모델 생성 중 잘못된 모델이 생성될 때 <see cref="T:System.Data.Entity.DbModelBuilder" />에 의해 throw되는 예외입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialization 정보입니다.</param>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">예외 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary> 관계 구성을 수행하기 위한 기본 클래스입니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary> 엔터티 형식 또는 복합 형식의 <see cref="T:System.byte[]" /> 속성을 구성하는 데 사용합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다. 이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     데이터베이스에서 속성 값이 생성되는 방식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">     데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.     'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.     또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 속성이 지정된 최대 길이를 갖도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="value"> 속성의 최대 길이입니다. 'null'을 설정하면 모든 최대 길이 제한이 속성에서 제거됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary> 속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="concurrencyToken"> 속성이 동시성 토큰인지 여부를 나타내는 값입니다. 'null'을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다. 또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary> 속성이 고정 길이가 되도록 구성합니다. 속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary> 속성에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary> 속성이 선택적 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다. <see cref="T:System.byte[]" /> 속성은 기본적으로 선택적 속성입니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary> 속성이 필수 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary> 속성이 데이터베이스의 행 버전이 되도록 구성합니다. 실제 데이터 형식은 사용되는 데이터베이스 공급자에 따라 달라집니다. 속성이 행 버전이 되도록 설정하면 해당 속성은 낙관적 동시성 토큰이 되도록 자동으로 구성됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary> 속성이 가변 길이가 되도록 구성합니다. <see cref="T:System.byte[]" /> 속성은 기본적으로 가변 길이입니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary> 하위 삭제 기능을 지원할 수 있는 관계를 구성합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary> 관계에 대해 하위 삭제가 가능하도록 구성합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary> 관계에 대해 하위 삭제가 가능한지 여부를 구성합니다. </summary>
      <param name="value">하위 삭제가 가능하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary> 엔터티 및 복합 형식의 파생된 구성 클래스를 <see cref="T:System.Data.Entity.DbModelBuilder" />에 등록할 수 있도록 합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />을 추가합니다. 모델의 각 형식에 대해 하나의 <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />만 추가할 수 있습니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> 인스턴스입니다.</returns>
      <param name="complexTypeConfiguration">추가할 복합 형식 구성입니다.</param>
      <typeparam name="TComplexType">구성되는 복합 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />을 추가합니다. 모델의 각 형식에 대해 하나의 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />만 추가할 수 있습니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> 인스턴스입니다.</returns>
      <param name="entityTypeConfiguration">추가할 엔터티 형식 구성입니다.</param>
      <typeparam name="TEntityType">구성되는 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 인스턴스에서 사용되는 규칙을 사용자 지정할 수 있도록 합니다. 현재는 하나 이상의 기본 규칙을 제거하는 작업만 지원됩니다. 기본 규칙은 <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" /> 네임스페이스에서 찾을 수 있습니다. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 대한 규칙을 사용하지 않도록 설정합니다. 제거할 수 있는 기본 규칙은 <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" /> 네임스페이스에서 찾을 수 있습니다. </summary>
      <typeparam name="TConvention">사용하지 않을 규칙의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary> 엔터티 형식 또는 복합 형식의 <see cref="T:System.DateTime" /> 속성을 구성하는 데 사용합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다. 이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     데이터베이스에서 속성 값이 생성되는 방식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">     데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.     'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.     또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary> 속성의 전체 자릿수를 구성합니다. 데이터베이스 공급자가 열의 데이터 형식에 대해 전체 자릿수를 지원하지 않는 경우에는 이 값이 무시됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="value">속성의 전체 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary> 속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="concurrencyToken"> 속성이 동시성 토큰인지 여부를 나타내는 값입니다. 'null'을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다. 또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary> 속성이 선택적 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary> 속성이 필수 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다. <see cref="T:System.DateTime" /> 속성은 기본적으로 필수 속성입니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary> 엔터티 형식 또는 복합 형식의 <see cref="T:System.decimal" /> 속성을 구성하는 데 사용합니다.  이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다. 이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     데이터베이스에서 속성 값이 생성되는 방식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">     데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.     'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.     또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary> 속성의 전체 자릿수 및 소수 자릿수를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="precision">속성의 전체 자릿수입니다.</param>
      <param name="scale">속성의 소수 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary> 속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="concurrencyToken"> 속성이 동시성 토큰인지 여부를 나타내는 값입니다. 'null'을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다. 또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary> 속성이 선택적 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary> 속성이 필수 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다. <see cref="T:System.decimal" /> 속성은 기본적으로 필수 속성입니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary> 개체 모델에서 노출되는 외래 키 속성을 지원할 수 있는 관계를 구성합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
      <typeparam name="TDependentEntityType">종속 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 개체 모델에서 노출되는 외래 키 속성을 사용하도록 관계를 구성합니다. 개체 모델에서 외래 키 속성이 노출되지 않는 경우에는 Map 메서드를 사용합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="foreignKeyExpression">외래 키로 사용할 속성을 나타내는 람다 식입니다. 외래 키가 여러 개의 속성으로 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다. 여러 개의 외래 키 속성을 사용할 경우 주 엔터티 형식에 대해 기본 키 속성이 구성된 순서와 동일한 순서로 속성을 지정해야 합니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary> 엔터티 형식 또는 엔터티 형식의 일부 속성에 대한 테이블 및 열 매핑을 구성합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
      <typeparam name="TEntityType">매핑할 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary> 기본 형식에서 상속된 모든 속성을 다시 매핑합니다.  별도의 테이블에 매핑할 파생 형식을 구성할 때 모든 속성을 다시 매핑하면 상속되지 않은 속성만이 아니라 모든 속성이 테이블에 포함됩니다. 이를 TPC(구체적 형식당 테이블) 매핑이라고 합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 이 매핑 조각에 포함될 속성을 구성합니다. 이 메서드를 호출하지 않으면 아직 매핑 조각에 포함되지 않은 모든 속성이 구성됩니다. </summary>
      <param name="propertiesExpression"> 매핑할 속성을 포함하는 익명 형식에 대한 람다 식입니다.</param>
      <typeparam name="TObject">매핑할 속성을 포함하는 익명 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 상속 계층 구조의 형식을 구분하는 데 사용되는 판별자 조건을 구성합니다. </summary>
      <returns>판별자 조건을 보다 세부적으로 구성하기 위한 구성 개체입니다.</returns>
      <param name="property"> 형식을 구분하는 데 사용되는 속성을 나타내는 람다 식입니다. </param>
      <typeparam name="TProperty">형식을 구분하는 데 사용되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary> 상속 계층 구조의 형식을 구분하는 데 사용되는 판별자 열을 구성합니다. </summary>
      <returns>판별자 열 및 값을 보다 세부적으로 구성하기 위한 구성 개체입니다.</returns>
      <param name="discriminator">판별자 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary> 매핑할 대상 테이블 이름을 구성합니다. </summary>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary> 매핑할 대상 테이블 이름 및 스키마를 구성합니다. </summary>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>외래 키 연결에 대한 매핑 구성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>지정한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 개체와 비교할 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary> 외래 키의 열 이름을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> 인스턴스입니다.</returns>
      <param name="keyColumnNames"> 외래 키 열 이름입니다. 여러 개의 외래 키 속성을 사용할 경우 대상 엔터티 형식에 대해 기본 키 속성이 구성된 순서와 동일한 순서로 속성을 지정해야 합니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>외래 키 열이 있는 테이블 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> 인스턴스입니다.</returns>
      <param name="tableName">구성할 테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>외래 키 열이 있는 테이블 이름 및 스키마를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>개체 모델에서 노출되지 않는 외래 키 속성만 지원할 수 있는 관계를 구성합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>개체 모델에서 노출되지 않는 외래 키 속성을 사용하도록 관계를 구성합니다. 구성 동작을 지정하여 열 및 테이블을 사용자 지정할 수 있습니다. 빈 구성 동작을 지정하면 열 이름이 규칙에 의해 생성됩니다. 개체 모델에서 외래 키 속성이 노출되는 경우에는 HasForeignKey 메서드를 사용합니다. 일부 관계의 경우 개체 모델에서 외래 키 속성이 노출되지 않습니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="configurationAction">외래 키 열 및 테이블을 구성하는 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary> 엔터티 형식 또는 복합 형식에 대한 길이 패싯을 포함하는 열을 구성하는 데 사용합니다.  이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 열이 지정된 최대 길이를 갖도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="value"> 열의 최대 길이입니다. 값을 null로 설정하면 모든 최대 길이 제한이 열에서 제거되고 데이터베이스 열에 기본 길이가 사용됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>열이 고정 길이가 되도록 구성합니다. </summary>
      <returns>열이 고정 길이이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary> 열에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary> 열이 가변 길이가 되도록 구성합니다. </summary>
      <returns>열이 가변 길이이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary> 엔터티 형식 또는 복합 형식에 대한 길이 패싯을 포함하는 속성을 구성하는 데 사용합니다.  이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 속성이 지정된 최대 길이를 갖도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="value"> 속성의 최대 길이입니다. 값을 null로 설정하면 모든 최대 길이 제한이 속성에서 제거되고 데이터베이스 열에 기본 길이가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary> 속성이 고정 길이가 되도록 구성합니다. 속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary> 속성에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary> 속성이 가변 길이가 되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary> 엔터티 형식에서 시작되는 다 관계를 구성합니다. </summary>
      <typeparam name="TEntityType">관계가 시작되는 엔터티 형식입니다.</typeparam>
      <typeparam name="TTargetEntityType">관계의 대상 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 다 대 다 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 다 대 다 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 다 대 선택적 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 다 대 선택적 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 다 대 필수 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 다 대 필수 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary> 다 대 다 관계의 테이블 및 열 매핑을 구성합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>지정한 <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">
        <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary> 왼쪽 외래 키의 열 이름을 구성합니다. 왼쪽 외래 키는 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />에 대한 HasMany 호출에서 지정된 탐색 속성을 나타냅니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> 인스턴스입니다.</returns>
      <param name="keyColumnNames"> 외래 키 열 이름입니다. 여러 개의 외래 키 속성을 사용할 경우 대상 엔터티 형식에 대해 기본 키 속성이 구성된 순서와 동일한 순서로 속성을 지정해야 합니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary> 오른쪽 외래 키의 열 이름을 구성합니다. 오른쪽 외래 키는 WithMany 호출에서 지정된 탐색 속성을 나타냅니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> 인스턴스입니다.</returns>
      <param name="keyColumnNames"> 외래 키 열 이름입니다. 여러 개의 외래 키 속성을 사용할 경우 대상 엔터티 형식에 대해 기본 키 속성이 구성된 순서와 동일한 순서로 속성을 지정해야 합니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary> 관계에 대한 조인 테이블 이름을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary> 관계에 대한 조인 테이블 이름 및 스키마를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
      <summary> 다 대 다 관계를 구성합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary> 관계를 저장하는 데 사용되는 외래 키 열 및 테이블을 구성합니다. </summary>
      <param name="configurationAction">외래 키 열 및 테이블을 구성하는 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary> 속성에 할당된 값을 기준으로 상속 계층 구조의 형식을 구분하는 데 사용되는 조건을 구성합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary> 속성에 반드시 값이 필요하도록 조건을 구성합니다.  이 속성이 저장된 열에 할당된 값이 없는 행은 이 엔터티 형식의 기본 형식인 것으로 간주됩니다. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>엔터티 형식에서 시작되는 선택적 관계를 구성합니다. </summary>
      <typeparam name="TEntityType">관계가 시작되는 엔터티 형식입니다.</typeparam>
      <typeparam name="TTargetEntityType">관계의 대상 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 선택적 대 다 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 선택적 대 다 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 선택적 대 선택적 관계가 되도록 구성합니다. 구성하는 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.  관계의 대상 엔터티 형식은 관계에서 주 엔터티가 됩니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 선택적 대 선택적 관계가 되도록 구성합니다. 구성하는 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.  관계의 대상 엔터티 형식은 관계에서 주 엔터티가 됩니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 선택적 대 선택적 관계가 되도록 구성합니다. 구성하는 엔터티 형식은 관계에서 주 엔터티가 됩니다.  관계의 대상 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 선택적 대 선택적 관계가 되도록 구성합니다. 구성하는 엔터티 형식은 관계에서 주 엔터티가 됩니다.  관계의 대상 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계의 지정된 끝이 필요하도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계의 지정된 끝이 필요하도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>엔터티 형식에서 기본 열을 구성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 속성을 저장하는 데 사용되는 기본 열의 순서를 구성합니다. 이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary> 속성을 저장하는 데 사용되는 기본 열의 데이터 형식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>기본 열이 선택적 열이 되도록 구성합니다.</summary>
      <returns>열이 선택적 열이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>기본 열이 필수 열이 되도록 구성합니다.</summary>
      <returns>열이 필수 열이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary> 엔터티 형식 또는 복합 형식의 기본 속성을 구성하는 데 사용합니다.  이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다. 이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     데이터베이스에서 속성 값이 생성되는 방식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">     데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.     'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.     또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary> 속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="concurrencyToken"> 속성이 동시성 토큰인지 여부를 나타내는 값입니다. null을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다. 또한 null을 지정하면 런타임 동작이 false를 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary> 속성이 선택적 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary> 속성이 필수 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary> 엔터티 형식에서 시작되는 필수 관계를 구성합니다. </summary>
      <typeparam name="TEntityType">관계가 시작되는 엔터티 형식입니다.</typeparam>
      <typeparam name="TTargetEntityType">관계의 대상 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 필수 대 다 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 필수 대 다 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 필수 대 선택적 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 필수 대 선택적 관계가 되도록 구성합니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 필수 대 필수 관계가 되도록 구성합니다. 구성하는 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.  관계의 대상 엔터티 형식은 관계에서 주 엔터티가 됩니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 필수 대 필수 관계가 되도록 구성합니다. 구성하는 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.  관계의 대상 엔터티 형식은 관계에서 주 엔터티가 됩니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 끝에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 필수 대 필수 관계가 되도록 구성합니다. 구성하는 엔터티 형식은 관계에서 주 엔터티가 됩니다.  관계의 대상 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 관계의 다른 쪽에 탐색 속성을 사용하여 관계가 필수 대 필수 관계가 되도록 구성합니다. 구성하는 엔터티 형식은 관계에서 주 엔터티가 됩니다.  관계의 대상 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다. </summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression"> 관계의 다른 쪽 끝에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .Net의 경우)와 같은 식입니다.  </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary> 문자열 값을 저장하는 데 사용되는 데이터베이스 열을 구성합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 데이터베이스 열의 순서를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary> 데이터베이스 열의 데이터 형식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>속성이 지정된 최대 길이를 갖도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="value">속성의 최대 길이입니다. 값을 null로 설정하면 열에 기본 길이가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary> 열이 고정 길이가 되도록 구성합니다. 속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary> 열에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary> 열이 선택적 열이 되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary> 열이 필수 열이 되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary> 열이 유니코드 문자열 내용을 지원하도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary> 열이 유니코드 문자열 내용을 지원하는지 여부를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="unicode"> 열이 유니코드 문자열 내용을 지원하는지 여부를 나타내는 값입니다. null을 지정하면 유니코드 패싯이 열에서 제거됩니다. 또한 null을 지정하면 런타임 동작이 false를 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary> 열이 가변 길이가 되도록 구성합니다. 열은 기본적으로 가변 길이입니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식의 <see cref="T:System.string" /> 속성을 구성하는 데 사용합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다. 이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary> 속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     데이터베이스에서 속성 값이 생성되는 방식을 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">     데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.     'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.     또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>속성이 지정된 최대 길이를 갖도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="value">속성의 최대 길이입니다. 이 속성을 null로 설정하면 모든 최대 길이 제한이 속성에서 제거되고 데이터베이스 열에 기본 길이가 사용됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary> 속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="concurrencyToken"> 속성이 동시성 토큰인지 여부를 지정합니다. null을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다. 또한 null을 지정하면 런타임 동작이 false를 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>속성이 고정 길이가 되도록 구성합니다. 속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>속성에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>속성이 선택적 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다. <see cref="T:System.string" /> 속성은 기본적으로 선택적 속성입니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary> 속성이 필수 속성이 되도록 구성합니다. 이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>속성이 유니코드 문자열 내용을 지원하도록 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>속성이 유니코드 문자열 내용을 지원하는지 여부를 구성합니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="unicode"> 속성이 유니코드 문자열 내용을 지원하는지 여부를 나타내는 값입니다. null을 지정하면 유니코드 패싯이 속성에서 제거됩니다. 또한 null을 지정하면 런타임 동작이 false를 지정할 때와 동일하게 됩니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>속성이 가변 길이가 되도록 구성합니다. <see cref="T:System.string" /> 속성은 기본적으로 가변 길이입니다. </summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>모델의 형식에 대해 구성을 수행할 수 있도록 합니다. </summary>
      <typeparam name="TStructuralType">구성할 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 속성이 데이터베이스에 매핑되지 않도록 모델에서 속성을 제외합니다. </summary>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다. </param>
      <typeparam name="TProperty">무시할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary> 이 형식에 정의된 <see cref="T:System.byte[]" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
      <summary>   이 형식에 정의된 <see cref="T:DbGeography" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">   구성할 속성을 나타내는 람다 식입니다.   C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
      <summary>   이 형식에 정의된 <see cref="T:DbGeometry" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">   구성할 속성을 나타내는 람다 식입니다.   C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary> 이 형식에 정의된 <see cref="T:System.DateTime" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary> 이 형식에 정의된 <see cref="T:System.DateTimeOffset" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary> 이 형식에 정의된 <see cref="T:System.decimal" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary> 이 형식에 정의된 Nullable(<see cref="T:System.DateTime" />) 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary> 이 형식에 정의된 Nullable(<see cref="T:System.DateTimeOffset" />) 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary> 이 형식에 정의된 Nullable(<see cref="T:System.Decimal" />) 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary> 이 형식에 정의된 Nullable(<see cref="T:System.TimeSpan" />) 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary> 이 형식에 정의된 Nullable(<see cref="T:System.struct" />) 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다. </param>
      <typeparam name="T">구성되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary> 이 형식에 정의된 <see cref="T:System.string" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary> 이 형식에 정의된 <see cref="T:System.TimeSpan" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 이 형식에 정의된 <see cref="T:System.struct" /> 속성을 구성합니다. </summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression"> 구성할 속성을 나타내는 람다 식입니다. 예를 들어 t =&gt; t.MyProperty(C#의 경우) 및 Function(t) t.MyProperty(Visual Basic .NET의 경우)와 같은 식입니다. </param>
      <typeparam name="T">구성되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary> 상속 계층 구조의 형식을 구분하는 데 사용되는 판별자 열을 구성합니다. 이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>상속 계층 구조의 다른 형식에서 구성되는 엔터티 형식을 식별하는 데 사용되는 판별자 값을 구성합니다. </summary>
      <returns>판별자 값을 저장하는 데 사용되는 열을 구성하기 위한 구성 개체입니다.</returns>
      <param name="value">엔터티 형식을 식별하는 데 사용할 값입니다.</param>
      <typeparam name="T">판별자 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>상속 계층 구조의 다른 형식에서 구성되는 엔터티 형식을 식별하는 데 사용되는 판별자 값을 구성합니다. </summary>
      <returns>판별자 값을 저장하는 데 사용되는 열을 구성하기 위한 구성 개체입니다.</returns>
      <param name="value">엔터티 형식을 식별하는 데 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary> 상속 계층 구조의 다른 형식에서 구성되는 엔터티 형식을 식별하는 데 사용되는 판별자 값을 구성합니다. </summary>
      <returns>판별자 값을 저장하는 데 사용되는 열을 구성하기 위한 구성 개체입니다.</returns>
      <param name="value">엔터티 형식을 식별하는 데 사용할 값입니다.</param>
      <typeparam name="T">판별자 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다. 이 메서드는 IntelliSense에서 숨겨집니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>관련 형식 사이에 한 쌍의 탐색 속성만 있는 경우 서로 반대되는 탐색 속성을 검색하기 위한 규칙입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
      <summary> 데이터 주석 또는 <see cref="T:System.Data.Entity.DbModelBuilder" /> API를 사용하여 명시적으로 소문자로 지정된 데이터 형식을 변환하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>모델의 형식에 있는 <see cref="T:System.ComponentModel.DataAnnotations.ComplexTypeAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>기본 키, 매핑된 기본 형식 및 탐색 속성이 없는 형식을 복합 형식으로 구성하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary> 모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>10진수 속성의 전체 자릿수와 소수 자릿수를 각각 18과 2로 설정하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>기본 키 속성이 첫 번째로 나타나도록 위치를 이동하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>외래 키 속성의 CLR null 허용 여부를 기준으로 선택적 관계와 필수 관계를 구분하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>모델의 탐색 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>모델의 외래 키 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 인스턴스에서 제거할 수 있는 규칙을 식별합니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>기본 키 속성을 검색하기 위한 규칙입니다.  </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.InversePropertyAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>다 대 다 관계에 관련된 두 테이블 모두에서 조인 테이블에 하위 삭제를 추가하기 위한 규칙입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>상속 속성을 매핑하여 잘못되었거나 지원되지 않는 매핑이 만들어지지 않는지 확인합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>종속 탐색 속성 이름과 주 형식 기본 키 속성 이름의 조합이 이름으로 사용된 외래 키 속성을 검색하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>모델의 형식에 있는 <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>필수 관계에 하위 삭제를 사용하도록 설정하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>일 대 일 관계에서 종속 엔터티 형식의 기본 키를 외래 키로 구성하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>엔터티 집합 이름을 엔터티 형식 이름의 복수화된 버전으로 설정하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>테이블 이름을 엔터티 형식 이름의 복수화된 버전으로 설정하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>이름이 주 형식 기본 키 속성 이름과 일치하는 외래 키 속성을 검색하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>길이 패싯을 지원하는 속성 형식에 대한 기본 최대 길이를 설정하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>모델의 탐색 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>모델의 기본 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>SqlCe가 공급자인 경우 해당 형식이 길이 패싯을 지원하는 속성에 대해 기본 최대 길이 4000을 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>정수 기본 키가 ID가 되도록 구성하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>모델의 형식에 있는 <see cref="T:System.ComponentModel.DataAnnotations.TableAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> 인스턴스를 처리하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>주 형식 이름과 주 형식 기본 키 속성 이름의 조합이 이름으로 사용된 외래 키 속성을 검색하기 위한 규칙입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>엔터티 유효성 검사가 실패할 때 <see cref="M:System.Data.Entity.DbContext.SaveChanges" />에서 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="entityValidationResults">유효성 검사 결과입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="entityValidationResults">유효성 검사 결과입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>유효성 검사 오류를 반환합니다.</summary>
      <returns>유효성 검사 오류(있는 경우)입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>단일 엔터티의 유효성 검사 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> 클래스의 인스턴스를 만듭니다. </summary>
      <param name="entry">결과가 적용되는 엔터티 항목입니다. null일 수 없습니다.</param>
      <param name="validationErrors">
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 인스턴스의 목록입니다. null일 수 없지만 빈 값일 수는 있습니다. 빈 값은 엔터티가 유효하다는 것을 의미합니다. </param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>결과가 적용되는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>엔터티가 유효한지 여부를 나타내는 표시기를 가져옵니다.</summary>
      <returns>엔터티가 유효하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>유효성 검사 오류를 가져옵니다. 이 속성은 null일 수 없습니다. </summary>
      <returns>유효성 검사 오류입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>유효성 검사 코드에서 예외가 throw될 때 <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />에서 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serialization 정보와 컨텍스트를 사용하여 <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="info">serialization 정보입니다.</param>
      <param name="context">스트리밍 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>유효성 검사 오류입니다. 엔터티 또는 속성 수준의 유효성 검사 오류일 수 있습니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" />의 인스턴스를 만듭니다.</summary>
      <param name="propertyName">유효하지 않은 속성의 이름입니다. null일 수 있습니다.</param>
      <param name="errorMessage">유효성 검사 오류 메시지입니다. null일 수 있습니다.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>유효성 검사 오류 메시지를 가져옵니다.</summary>
      <returns>유효성 검사 오류 메시지입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>유효하지 않은 속성의 이름을 가져옵니다. </summary>
      <returns>유효하지 않은 속성의 이름입니다.</returns>
    </member>
  </members>
</doc>